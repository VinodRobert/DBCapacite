/****** Object:  Procedure [BI].[spIPLA]    Committed by VersionSQL https://www.versionsql.com ******/

CREATE PROCEDURE BI.spIPLA(@FROMBORG INT,@TOBORG INT,@FINYEAR INT,@FROMPERIOD INT,@TOPERIOD INT) 
AS

DECLARE @CBCTRANGRP VARCHAR(10)
DECLARE @WIP VARCHAR(10)
SET @WIP = '2990000' 

DECLARE @ORGID INT 
DECLARE @LEDGERCODE VARCHAR(10) 
DECLARE @DEBIT DECIMAL(18,2) 
DECLARE @CREDIT DECIMAL(18,2) 
DECLARE @TRANSID INT 
DECLARE @CREDNO VARCHAR(15) 
DECLARE @FD VARCHAR(200)
DECLARE @BANKSTART VARCHAR(10)
DECLARE @BANKEND   VARCHAR(10)
DECLARE @STATUS INT 
DECLARE @HOWMANYSETS INT 
DECLARE @SETCOUNTER INT 
DECLARE @ALLOCATION VARCHAR(20) 
DECLARE @AMOUNT DECIMAL(18,2) 
DECLARE @XTRANSID INT 
DECLARE @XAMOUNT DECIMAL(18,2) 

SELECT @BANKSTART=CONTROLFROMGL , @BANKEND=CONTROLTOGL FROM CONTROLCODES WHERE CONTROLNAME='Bank' 

SELECT LEDGERCODE INTO #BANKS FROM LEDGERCODES WHERE LEDGERCODE BETWEEN @BANKSTART AND @BANKEND
CREATE TABLE #POSTINGS(TRANGRP INT, SETNO INT, FINYEAR INT, PERIOD INT, PDATE DATETIME, NARRATION VARCHAR(250), 
FROMBORG INT, CREDITLEDGER VARCHAR(10),IPLAFROM DECIMAL(18,2), TOBORG INT, DEBITLEDGER VARCHAR(10),
IPLATO DECIMAL(18,2),CREDNO VARCHAR(15), AMOUNT DECIMAL(18,2)) 

SELECT BORGID, ICGLCODE  LEDGERCODE INTO #IPLA FROM BORGS 
DELETE FROM #IPLA WHERE LEDGERCODE IS NULL

DECLARE @FROMLEDGERCODE VARCHAR(10)
DECLARE @TOLEDGERCODE VARCHAR(10) 

 
SELECT @FROMLEDGERCODE=LEDGERCODE FROM #IPLA WHERE BORGID=@FROMBORG
SELECT @TOLEDGERCODE = LEDGERCODE FROM #IPLA WHERE BORGID=@TOBORG

SELECT @FROMLEDGERCODE,@TOLEDGERCODE 

SELECT LEDGERCODE INTO #OTHERIPLA FROM #IPLA WHERE LEDGERCODE NOT IN (@FROMLEDGERCODE,@TOLEDGERCODE) 

SELECT TRANGRP INTO #FIRSTTRAGRP     FROM TRANSACTIONS WHERE LEDGERCODE=@FROMLEDGERCODE AND PERIOD BETWEEN @FROMPERIOD AND @TOPERIOD AND YEAR=@FINYEAR 
SELECT TRANGRP INTO #SECONDTRANGRP   FROM TRANSACTIONS WHERE LEDGERCODE=@TOLEDGERCODE   AND PERIOD BETWEEN @FROMPERIOD AND @TOPERIOD AND YEAR=@FINYEAR 

CREATE TABLE #FINALTRANGRP(TRANGRP INT) 

INSERT INTO #FINALTRANGRP 
SELECT TRANGRP  FROM #FIRSTTRAGRP 
INTERSECT  
SELECT TRANGRP  FROM #SECONDTRANGRP




DECLARE CBCGROUP CURSOR FOR SELECT TRANGRP FROM #FINALTRANGRP 
WHERE TRANGRP IN (SELECT DISTINCT  TRANGRP FROM TRANSACTIONS WHERE LEFT(BATCHREF,3)='CBC' AND TRANGRP IN (SELECT TRANGRP FROM #FINALTRANGRP) )  

OPEN CBCGROUP 
FETCH NEXT FROM CBCGROUP INTO @CBCTRANGRP

WHILE @@FETCH_STATUS= 0
BEGIN
  SELECT ORGID,LEDGERCODE,DEBIT,CREDIT,CREDNO,ForeignDescription,ALLOCATION, TRANSID ,0 AS SETNO 
  INTO #TEMP0
  FROM TRANSACTIONS 
  WHERE ORGID IN (@FROMBORG,@TOBORG) 
  AND LEDGERCODE <> @WIP 
  AND TRANGRP = @CBCTRANGRP 
  AND LEDGERCODE NOT IN (SELECT LEDGERCODE FROM #OTHERIPLA ) 
  
  DELETE FROM #TEMP0 WHERE ABS(DEBIT-CREDIT) NOT IN (SELECT DISTINCT ABS(DEBIT-CREDIT) FROM #TEMP0 WHERE LEDGERCODE = @FROMLEDGERCODE) AND ForeignDescription=''
  SET @HOWMANYSETS = 0 
  SELECT @HOWMANYSETS = COUNT(*) FROM #TEMP0 WHERE ORGID=@TOBORG AND LEDGERCODE=@FROMLEDGERCODE
  IF @HOWMANYSETS = 1
     UPDATE #TEMP0 SET SETNO=1 
  ELSE
   BEGIN
     SELECT DISTINCT TRANSID,ABS(DEBIT-CREDIT) AMOUNT INTO #TEMP9 FROM #TEMP0 WHERE ORGID=@TOBORG AND LEDGERCODE=@FROMLEDGERCODE
	 DECLARE MS CURSOR FOR  SELECT * FROM #TEMP9 ORDER BY TRANSID 
	 OPEN MS 
	 SET @HOWMANYSETS =1
	 FETCH NEXT FROM MS INTO @XTRANSID,@XAMOUNT 
	 WHILE @@FETCH_STATUS = 0 
	 BEGIN 
	   UPDATE #TEMP0 SET SETNO=@HOWMANYSETS WHERE TRANSID = @XTRANSID 
	   UPDATE #TEMP0 SET SETNO=@HOWMANYSETS WHERE TRANSID < @XTRANSID AND SETNO=0
	   SET @HOWMANYSETS = @HOWMANYSETS+1
	   FETCH NEXT FROM MS INTO @XTRANSID,@XAMOUNT
	 END 
	 CLOSE MS
	 DEALLOCATE MS 
     UPDATE #TEMP0 SET SETNO=@HOWMANYSETS-1 WHERE ForeignDescription<>''
	 DROP TABLE #TEMP9 
	 SELECT @HOWMANYSETS = MAX(SETNO)  FROM #TEMP0
   END 
   
  --SELECT * FROM #TEMP0 
  --SELECT @CBCTRANGRP

  SET @SETCOUNTER = 1 
  WHILE @SETCOUNTER <= @HOWMANYSETS 
  BEGIN
    INSERT INTO #POSTINGS(TRANGRP,SETNO )  VALUES (@CBCTRANGRP,@SETCOUNTER)
	 
	UPDATE #POSTINGS SET FINYEAR=T.YEAR, PERIOD=T.PERIOD, PDATE=T.PDATE, NARRATION=LEFT(T.DESCRIPTION,255)
	FROM TRANSACTIONS T INNER JOIN #POSTINGS ON T.TRANGRP=#POSTINGS.TRANGRP AND T.TRANGRP = @CBCTRANGRP AND SETNO = @SETCOUNTER 
 
	DECLARE TRANSLISTS CURSOR FOR SELECT * FROM #TEMP0 WHERE SETNO = @SETCOUNTER  ORDER BY TRANSID 
	OPEN TRANSLISTS
	FETCH NEXT FROM TRANSLISTS INTO @ORGID,@LEDGERCODE,@DEBIT,@CREDIT,@CREDNO,@FD,@ALLOCATION,@TRANSID,@STATUS  
    WHILE @@FETCH_STATUS = 0 
	BEGIN
	  
	  IF @ORGID = @TOBORG 
	    BEGIN 
		   IF @LEDGERCODE=@FROMLEDGERCODE 
		      UPDATE #POSTINGS SET IPLATO = @DEBIT-@CREDIT WHERE TRANGRP = @CBCTRANGRP AND SETNO = @SETCOUNTER 
		   ELSE
		      UPDATE #POSTINGS SET DEBITLEDGER = @LEDGERCODE,AMOUNT = @DEBIT-@CREDIT ,TOBORG = @TOBORG, CREDNO=@CREDNO  WHERE TRANGRP = @CBCTRANGRP AND SETNO = @SETCOUNTER 
		END 
	  IF @ORGID = @FROMBORG 
	    BEGIN
		   IF @LEDGERCODE = @TOLEDGERCODE	
		      UPDATE #POSTINGS SET IPLAFROM = @DEBIT-@CREDIT WHERE TRANGRP = @CBCTRANGRP AND SETNO = @SETCOUNTER 
		   ELSE
		      UPDATE #POSTINGS SET CREDITLEDGER = @LEDGERCODE , FROMBORG = @ORGID  WHERE TRANGRP = @CBCTRANGRP AND SETNO = @SETCOUNTER 
		END 
      IF @ORGID = @FROMBORG AND @FD<>'' AND @LEDGERCODE IN (SELECT LEDGERCODE FROM #BANKS) AND @CREDIT>0 
	    BEGIN
		     UPDATE #POSTINGS SET CREDITLEDGER = @LEDGERCODE WHERE TRANGRP = @CBCTRANGRP  
		END
	  UPDATE #POSTINGS SET TOBORG = @TOBORG,FROMBORG =@FROMBORG WHERE TRANGRP = @CBCTRANGRP 
	 FETCH NEXT FROM TRANSLISTS INTO @ORGID,@LEDGERCODE,@DEBIT,@CREDIT,@CREDNO,@FD,@ALLOCATION,@TRANSID,@STATUS 

	END
	CLOSE TRANSLISTS
	DEALLOCATE TRANSLISTS 

	SET @SETCOUNTER = @SETCOUNTER + 1
  END 
  DROP TABLE #TEMP0 
  FETCH NEXT FROM CBCGROUP INTO @CBCTRANGRP
END
CLOSE CBCGROUP
DEALLOCATE CBCGROUP 
ALTER TABLE #POSTINGS ADD BANKNAME VARCHAR(50)
ALTER TABLE #POSTINGS ADD EXPENSEHEAD VARCHAR(50) 
UPDATE #POSTINGS SET BANKNAME=L.LEDGERNAME FROM LEDGERCODES L INNER JOIN #POSTINGS ON #POSTINGS.CREDITLEDGER = L.LEDGERCODE 
UPDATE #POSTINGS SET EXPENSEHEAD = L.LEDGERNAME FROM LEDGERCODES L INNER JOIN #POSTINGS ON #POSTINGS.DEBITLEDGER = L.LEDGERCODE 
SELECT * FROM #POSTINGS