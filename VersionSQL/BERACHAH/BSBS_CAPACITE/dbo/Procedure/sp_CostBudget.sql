/****** Object:  Procedure [dbo].[sp_CostBudget]    Committed by VersionSQL https://www.versionsql.com ******/

-- =============================================
-- Author: Matthew Spiller
-- Create date: 10-09-2014
-- Description:	Cost Budget info
-- =============================================
CREATE PROCEDURE [dbo].[sp_CostBudget] 
	-- Add the parameters for the stored procedure here
	@ledgerCode nvarchar(10) = '',
	@orgid int = -1,
	@year int = -1,
	@period int = -1,
	@curr nvarchar(3) = '',
	@contract nvarchar(10) = '',
	@actno nvarchar(10) = '',
	@plantDivid int = -1,
	@divid int = -1
AS
BEGIN
	-- SET NOCOUNT ON added to prevent extra result sets from
	-- interfering with SELECT statements.
	SET NOCOUNT ON;

  if @actno = '-1' and @contract != '-1' begin set @actno = '' end

	SELECT BORGID, YEAR, PERIOD, CURRENCY,
	LEDGERCODE, ALLOCATION, CONTRACT, ACTNUMBER, PLANTDIVID, DIVID,
	sum(COMMITED) COMMITED,
	sum(ACCRUAL) ACCRUAL,
	sum(ACCTUAL) ACCTUAL,
	sum(PERIODBUDGET) PERIODBUDGET,
	sum(TOPERIODBUDGET) TOPERIODBUDGET,
	sum(YEARBUDGET) YEARBUDGET,
	sum(LTDBUDGET) LTDBUDGET,
	sum(UNAPPROVED) UNAPPROVED
	FROM
	(
		SELECT
		ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) BORGID,
		B.CURRENTYEAR AS YEAR,
		B.PERIOD AS PERIOD,
		B.CURRENCY as CURRENCY,
		rtrim(LC.LEDGERCODE) as LEDGERCODE,
		LC.LEDGERALLOC ALLOCATION,
		rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) AS CONTRACT,
		rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) AS ACTNUMBER,
		isnull(PLANTANDEQ.DIVID, -1) AS PLANTDIVID,
		isnull(DIVISIONS.DIVID, -1) AS DIVID,
		SUM(
			(((ORDITEMS.QTY - isnull(DL.QTY, 0)) * (ORDITEMS.PRICE * (1 - (ORDITEMS.DISCOUNT / 100)) + RA.RAVAL)) + abs(MT.REIMBTAX))
			 * CASE when (ORD.CURRENCY <> B.Currency and ORD.HOMECURRENCY = B.Currency) then ORD.EXCHRATE when ORD.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end
		) AS COMMITED,
		0 ACCRUAL, 0 ACCTUAL, 0 PERIODBUDGET, 0 TOPERIODBUDGET, 0 YEARBUDGET, 0 LTDBUDGET, 0 UNAPPROVED
		FROM ORD
		INNER JOIN ORDITEMS ON ORD.ORDID = ORDITEMS.ORDID
		INNER JOIN LEDGERCODES LC ON ORDITEMS.GLCODEID = LC.LEDGERID
		LEFT OUTER JOIN CONTRACTS ON ORDITEMS.CONTRACTID = CONTRACTS.CONTRID AND LC.LEDGERALLOC = 'Contracts'
		LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
		LEFT OUTER JOIN ACTIVITIES ON ORDITEMS.ACTID = ACTIVITIES.ACTID and LC.LEDGERALLOC = 'Contracts'
		LEFT OUTER JOIN PLANTANDEQ on PLANTANDEQ.PENUMBER = ORDITEMS.PENUMBER AND LC.LEDGERALLOC = 'Plant'
		LEFT OUTER JOIN DIVISIONS on DIVISIONS.DIVID = ORDITEMS.DIVISIONID AND LC.LEDGERALLOC = 'Overheads'
		INNER JOIN BORGS B ON ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) = B.BORGID
		 CROSS APPLY (
		  SELECT ISNULL(SUM(ROUND(RIA.VALUE / OI.QTY, 4)), 0) RAVAL
		  FROM ORD O
		  INNER JOIN ORDITEMS OI ON O.ORDID = OI.ORDID
		  INNER JOIN REQITEMSADD RIA ON RIA.LINENUMBER = OI.LINENUMBER AND RIA.REQID = O.REQID
		  INNER JOIN REQADD ON RIA.RAID = REQADD.RAID
		  WHERE REQADD.ISCOST = 1
		  AND OI.ORDID = ORDITEMS.ORDID
		  AND OI.LINENUMBER = ORDITEMS.LINENUMBER
          AND OI.QTY <> 0
		 ) RA
		 OUTER APPLY (
		 SELECT
		 RTRIM(CURR.CURRCODE) CURRCODE,
		 ISNULL(CCEE.RATE, -1) AS RATE,
		 ISNULL(CURR.DECIMALS, 2) DECIMALS
		 FROM CURRENCIES CURR
		 INNER JOIN (
		  SELECT CCE.FROMCURR, CCE.RATE
		  FROM BORGS B
		  INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
		  INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
		  INNER JOIN (
		   SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
		   FROM CURREXCH C
		   GROUP BY GROUPID, FROMCURR, TOCURR) CE
		  ON CCE.GROUPID = CE.GROUPID
		  AND CCE.FROMCURR = CE.FROMCURR
		  AND CCE.TOCURR = CE.TOCURR
		  AND CCE.STARTDATE = CE.STARTDATE
		  WHERE B.BORGID = ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID)
		  AND CCG.DISABLED = 0
		  ) CCEE
		 ON CCEE.FROMCURR = CURR.CURRCODE
		 WHERE CURR.CURRCODE = ORD.CURRENCY
		 ) EXR
			OUTER APPLY (
			SELECT CASE WHEN SUM(D.DLVRQTY) > OI.QTY THEN OI.QTY ELSE SUM(D.DLVRQTY) END QTY, D.ORDID, D.ORDITEMLINENO
			FROM DELIVERIES D
			INNER JOIN ORDITEMS OI ON D.ORDID = OI.ORDID AND D.ORDITEMLINENO = OI.LINENUMBER
			WHERE D.ORDID = ORDITEMS.ORDID
			AND D.ORDITEMLINENO = ORDITEMS.LINENUMBER
			GROUP BY D.ORDID, D.ORDITEMLINENO, OI.QTY
			) DL
    OUTER APPLY(SELECT ISNULL(SUM(ISNULL(TAX, 0)), 0) REIMBTAX FROM GETVIEWTAXTRANS('', (DL.QTY * Orditems.Price) * (1 - (Orditems.Discount / 100)), ORDITEMS.VATID, ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID), Ord.Currency) WHERE ISNULL(ISREIMB, -1) = 0) MT
		WHERE ORDITEMS.ALLOCATION in ('Contracts', 'Overheads', 'Plant')
		AND (ORDITEMS.QTY - ISNULL(DL.QTY, 0)) <> 0
		AND ORD.ORDSTATUSID IN (274)
		AND NOT(ORDITEMS.ALLOCATION = 'Plant' and isnull(PLANTANDEQ.DIVID, -1) = -1)
		AND LC.LEDGERCODE = case when @ledgerCode = '' then LC.LEDGERCODE else @ledgerCode end
		AND ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) = case when @orgid = -1 then ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) else @orgid end
		AND B.CURRENTYEAR = case when @year = -1 then B.CURRENTYEAR else @year end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) = case when @contract = '' then rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) else @contract end
		AND rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) = case when @actno = '-1' then rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) else @actno end
		AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
		AND isnull(DIVISIONS.DIVID, -1) = case when @divid = -1 then isnull(DIVISIONS.DIVID, -1) else @divid end
		group by
		B.CURRENTYEAR, B.PERIOD,
		ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID),
		B.CURRENCY, LC.LEDGERCODE, LC.LEDGERALLOC, CONTRACTS.CONTRNUMBER, ACTIVITIES.ACTNUMBER, PLANTANDEQ.DIVID, DIVISIONS.DIVID

		union all

		SELECT
		ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID) BORGID,
		B.CURRENTYEAR AS YEAR,
		B.PERIOD AS PERIOD,
		B.CURRENCY as CURRENCY,
		rtrim(LC.LEDGERCODE) as LEDGERCODE,
		LC.LEDGERALLOC ALLOCATION,
		rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) AS CONTRACT,
		rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) AS ACTNUMBER,
		isnull(PLANTANDEQ.DIVID, -1) AS PLANTDIVID,
		isnull(DIVISIONS.DIVID, -1) AS DIVID,
		0 COMMITED,	0 ACCRUAL, 0 ACCTUAL, 0 PERIODBUDGET, 0 TOPERIODBUDGET, 0 YEARBUDGET, 0 LTDBUDGET,
		SUM(
			(REQITEMS.QTY) * (REQITEMS.PRICE * (1 - (REQITEMS.DISCOUNT / 100)))
			 * CASE when (REQ.CURRENCY <> B.Currency and REQ.HOMECURRENCY = B.Currency) then REQ.EXCHRATE when REQ.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end
		) AS UNAPPROVED
		FROM REQ
		INNER JOIN REQITEMS ON REQ.REQID = REQITEMS.REQID
		INNER JOIN LEDGERCODES LC ON REQITEMS.GLCODEID = LC.LEDGERID
		LEFT OUTER JOIN CONTRACTS ON REQITEMS.CONTRACTID = CONTRACTS.CONTRID AND LC.LEDGERALLOC = 'Contracts'
		LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
		LEFT OUTER JOIN ACTIVITIES ON REQITEMS.ACTID = ACTIVITIES.ACTID and LC.LEDGERALLOC = 'Contracts'
		LEFT OUTER JOIN PLANTANDEQ on PLANTANDEQ.PENUMBER = REQITEMS.PENUMBER AND LC.LEDGERALLOC = 'Plant'
		LEFT OUTER JOIN DIVISIONS on DIVISIONS.DIVID = REQITEMS.DIVISIONID AND LC.LEDGERALLOC = 'Overheads'
		INNER JOIN BORGS B ON ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID) = B.BORGID
		 OUTER APPLY (
		 SELECT
		 RTRIM(CURR.CURRCODE) CURRCODE,
		 ISNULL(CCEE.RATE, -1) AS RATE,
		 ISNULL(CURR.DECIMALS, 2) DECIMALS
		 FROM CURRENCIES CURR
		 INNER JOIN (
		  SELECT CCE.FROMCURR, CCE.RATE
		  FROM BORGS B
		  INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
		  INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
		  INNER JOIN (
		   SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
		   FROM CURREXCH C
		   GROUP BY GROUPID, FROMCURR, TOCURR) CE
		  ON CCE.GROUPID = CE.GROUPID
		  AND CCE.FROMCURR = CE.FROMCURR
		  AND CCE.TOCURR = CE.TOCURR
		  AND CCE.STARTDATE = CE.STARTDATE
		  WHERE B.BORGID = ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID)
		  AND CCG.DISABLED = 0
		  ) CCEE
		 ON CCEE.FROMCURR = CURR.CURRCODE
		 WHERE CURR.CURRCODE = REQ.CURRENCY
		 ) EXR
		WHERE REQITEMS.ALLOCATION in ('Contracts', 'Overheads', 'Plant')
		AND REQ.REQSTATUSID IN (163, 32)
		AND NOT(REQITEMS.ALLOCATION = 'Plant' and isnull(PLANTANDEQ.DIVID, -1) = -1)
		AND LC.LEDGERCODE = case when @ledgerCode = '' then LC.LEDGERCODE else @ledgerCode end
		AND ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID) = case when @orgid = -1 then ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID) else @orgid end
		AND B.CURRENTYEAR = case when @year = -1 then B.CURRENTYEAR else @year end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) = case when @contract = '' then rtrim(isnull(CONTRACTS.CONTRNUMBER, '')) else @contract end
		AND rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) = case when @actno = '-1' then rtrim(isnull(ACTIVITIES.ACTNUMBER, '')) else @actno end
		AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
		AND isnull(DIVISIONS.DIVID, -1) = case when @divid = -1 then isnull(DIVISIONS.DIVID, -1) else @divid end
		group by
		B.CURRENTYEAR, B.PERIOD,
		ISNULL(ISNULL(REQITEMS.TBORGID, PROJECTS.BORGID), REQ.BORGID),
		B.CURRENCY, LC.LEDGERCODE, LC.LEDGERALLOC, CONTRACTS.CONTRNUMBER, ACTIVITIES.ACTNUMBER, PLANTANDEQ.DIVID, DIVISIONS.DIVID
	
		union all

		select
		TR.ORGID, TR.YEAR, B.PERIOD, B.CURRENCY,
		TR.LEDGERCODE,
		TR.ALLOCATION ALLOCATION,
		ISNULL(CONTRACTS.CONTRNUMBER, '') CONTRACT,
		ISNULL(ACTIVITIES.ACTNUMBER, '') ACTNUMBER,
		ISNULL(PLANTANDEQ.DIVID, -1) PLANTDIVID,
		ISNULL(DIVISIONS.DIVID, -1) DIVID,
		0 COMMITED, 0 ACCRUAL,
		sum(case when TR.CURRENCY = B.CURRENCY then TR.DEBIT - TR.CREDIT else case when debit <> 0 then 1 else -1 end * abs(TR.HOMECURRAMOUNT) end) ACCTUAL,
		0 PERIODBUDGET, 0 TOPERIODBUDGET, 0 YEARBUDGET, 0 LTDBUDGET, 0 UNAPPROVED
		from TRANSACTIONS TR
		INNER JOIN BORGS B on B.CURRENTYEAR = TR.YEAR and B.BORGID = TR.ORGID
		LEFT OUTER JOIN CONTRACTS ON TR.CONTRACT = CONTRACTS.CONTRNUMBER AND TR.ALLOCATION = 'Contracts'
		LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
		LEFT OUTER JOIN ACTIVITIES ON TR.ACTIVITY = ACTIVITIES.ACTNUMBER and TR.ALLOCATION = 'Contracts'
		LEFT OUTER JOIN PLANTANDEQ on PLANTANDEQ.PENUMBER = TR.PLANTNO AND TR.ALLOCATION = 'Plant'
		LEFT OUTER JOIN DIVISIONS on DIVISIONS.DIVID = TR.DIVID AND TR.ALLOCATION = 'Overheads'
		WHERE TR.ALLOCATION in ('Contracts', 'Overheads', 'Plant')
		AND NOT(TR.ALLOCATION = 'Plant' and isnull(PLANTANDEQ.DIVID, -1) = -1)
		AND TR.LEDGERCODE = case when @ledgerCode = '' then TR.LEDGERCODE else @ledgerCode end
		AND TR.ORGID = case when @orgid = -1 then TR.ORGID else @orgid end
		AND TR.YEAR = case when @year = -1 then TR.YEAR else cast(@year as char(10)) end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND ISNULL(CONTRACTS.CONTRNUMBER, '') = case when @contract = '' then ISNULL(CONTRACTS.CONTRNUMBER, '') else @contract end
		AND ISNULL(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then ISNULL(ACTIVITIES.ACTNUMBER, '') else @actno end
		AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
		AND ISNULL(DIVISIONS.DIVID, -1) = case when @divid = -1 then ISNULL(DIVISIONS.DIVID, -1) else @divid end
		group by
		TR.ORGID, TR.YEAR, B.PERIOD, B.CURRENCY, TR.LEDGERCODE, TR.ALLOCATION,
		CONTRACTS.CONTRNUMBER, ACTIVITIES.ACTNUMBER, PLANTANDEQ.DIVID, DIVISIONS.DIVID
		having sum(case when TR.CURRENCY = B.CURRENCY then TR.DEBIT - TR.CREDIT else case when debit <> 0 then 1 else -1 end * abs(TR.HOMECURRAMOUNT) end) <> 0

		union all

		SELECT PDBUDGETS.BORGID, PDBUDGETS.YEARNO as YEAR, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE,
		'Plant' ALLOCATION,
		'' CONTRACT, '' ACTNUMBER,
		PDBUDGETS.DIVID as PLANTDIVID,
		-1 DIVID,
		0 COMMITED, 0 ACCRUAL, 0 ACCTUAL,
		sum(case when B.CURRENTYEAR = PDBUDGETS.YEARNO AND PDBUDGETS.PERIOD = B.PERIOD then case when isnull(FC.FCAMOUNT, 0) = 0 then PDBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) PERIODBUDGET,
		sum(case when B.CURRENTYEAR = PDBUDGETS.YEARNO AND PDBUDGETS.PERIOD <= B.PERIOD then case when isnull(FC.FCAMOUNT, 0) = 0 then PDBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) TOPERIODBUDGET,
		sum(case when B.CURRENTYEAR = PDBUDGETS.YEARNO then case when isnull(FC.FCAMOUNT, 0) = 0 then PDBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) YEARBUDGET,
		sum(case when isnull(FC.FCAMOUNT, 0) = 0 then PDBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end) LTDBUDGET, 
		0 UNAPPROVED
		FROM PDBUDGETS
		INNER JOIN BORGS B on B.BORGID = PDBUDGETS.BORGID
		INNER JOIN LEDGERCODES LC on LC.LedgerID = PDBUDGETS.LEDGERID
		outer apply 
		(
			select top 1
			case PDBUDGETS.PERIOD 
			when 1 then FC.FORECAST1 when 2 then FC.FORECAST2 when 3 then FC.FORECAST3 when 4 then FC.FORECAST4 when 5 then FC.FORECAST5 when 6 then FC.FORECAST6
			when 7 then FC.FORECAST7 when 8 then FC.FORECAST8 when 9 then FC.FORECAST9 when 10 then FC.FORECAST10 when 11 then FC.FORECAST11 when 12 then FC.FORECAST12
			else 0
			end FCAMOUNT
			from PDFORECAST FC 
			WHERE FC.BORGID = B.BORGID and FC.LEDGERID = PDBUDGETS.LEDGERID and fc.YEARNO = PDBUDGETS.YEARNO and FC.DIVID = PDBUDGETS.DIVID and FC.PERIOD <= PDBUDGETS.PERIOD 
			AND case PDBUDGETS.PERIOD
			when 1 then FC.FORECAST1 when 2 then FC.FORECAST2 when 3 then FC.FORECAST3 when 4 then FC.FORECAST4 when 5 then FC.FORECAST5 when 6 then FC.FORECAST6
			when 7 then FC.FORECAST7 when 8 then FC.FORECAST8 when 9 then FC.FORECAST9 when 10 then FC.FORECAST10 when 11 then FC.FORECAST11 when 12 then FC.FORECAST12
			else 0
			end <> 0
			ORDER BY PERIOD DESC
		) FC
		WHERE LC.LEDGERCODE = case when @ledgerCode = '' then LC.LEDGERCODE else @ledgerCode end
		AND PDBUDGETS.BORGID = case when @orgid = -1 then PDBUDGETS.BORGID else @orgid end
		AND PDBUDGETS.YEARNO = case when @year = -1 then PDBUDGETS.YEARNO else @year end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND '' = case when @contract = '' then '' else @contract end
		AND '' = case when @actno = '-1' then '' else @actno end
		AND isnull(PDBUDGETS.DIVID, -1) = case when @plantDivid = -1 then isnull(PDBUDGETS.DIVID, -1) else @plantDivid end
		AND -1 = case when @divid = -1 then -1 else @divid end
		group by
		PDBUDGETS.BORGID, PDBUDGETS.YEARNO, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE, PDBUDGETS.DIVID, FC.FCAMOUNT 

		union all

		SELECT OHBUDGETS.BORGID, OHBUDGETS.YEARNO as YEAR, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE,
		'Overheads' ALLOCATION,
		'' CONTRACT, '' ACTNUMBER,
		-1 as PLANTDIVID,
		OHBUDGETS.DIVID as DIVID,
		0 COMMITED, 0 ACCRUAL, 0 ACCTUAL,
		sum(case when B.CURRENTYEAR = OHBUDGETS.YEARNO AND OHBUDGETS.PERIOD = B.PERIOD then case when isnull(FC.FCAMOUNT, 0) = 0 then OHBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) PERIODBUDGET,
		sum(case when B.CURRENTYEAR = OHBUDGETS.YEARNO AND OHBUDGETS.PERIOD <= B.PERIOD then case when isnull(FC.FCAMOUNT, 0) = 0 then OHBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) TOPERIODBUDGET,
		sum(case when B.CURRENTYEAR = OHBUDGETS.YEARNO then case when isnull(FC.FCAMOUNT, 0) = 0 then OHBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end else 0 end) YEARBUDGET,
		sum(case when isnull(FC.FCAMOUNT, 0) = 0 then OHBUDGETS.BUDGET else isnull(FC.FCAMOUNT, 0) end) LTDBUDGET, 
		0 UNAPPROVED
		FROM OHBUDGETS
		INNER JOIN BORGS B on B.BORGID = OHBUDGETS.BORGID
		INNER JOIN LEDGERCODES LC on LC.LedgerID = OHBUDGETS.LEDGERID
		outer apply 
		(
			select top 1
			case OHBUDGETS.PERIOD 
			when 1 then FC.FORECAST1 when 2 then FC.FORECAST2 when 3 then FC.FORECAST3 when 4 then FC.FORECAST4 when 5 then FC.FORECAST5 when 6 then FC.FORECAST6
			when 7 then FC.FORECAST7 when 8 then FC.FORECAST8 when 9 then FC.FORECAST9 when 10 then FC.FORECAST10 when 11 then FC.FORECAST11 when 12 then FC.FORECAST12
			else 0
			end FCAMOUNT
			from OHFORECAST FC 
			WHERE FC.BORGID = B.BORGID and FC.LEDGERID = OHBUDGETS.LEDGERID and fc.YEARNO = OHBUDGETS.YEARNO and FC.DIVID = OHBUDGETS.DIVID and FC.PERIOD <= OHBUDGETS.PERIOD 
			AND case OHBUDGETS.PERIOD
			when 1 then FC.FORECAST1 when 2 then FC.FORECAST2 when 3 then FC.FORECAST3 when 4 then FC.FORECAST4 when 5 then FC.FORECAST5 when 6 then FC.FORECAST6
			when 7 then FC.FORECAST7 when 8 then FC.FORECAST8 when 9 then FC.FORECAST9 when 10 then FC.FORECAST10 when 11 then FC.FORECAST11 when 12 then FC.FORECAST12
			else 0
			end <> 0
			ORDER BY PERIOD DESC
		) FC
		WHERE LC.LEDGERCODE = case when @ledgerCode = '' then LC.LEDGERCODE else @ledgerCode end
		AND OHBUDGETS.BORGID = case when @orgid = -1 then OHBUDGETS.BORGID else @orgid end
		AND OHBUDGETS.YEARNO = case when @year = -1 then OHBUDGETS.YEARNO else @year end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND '' = case when @contract = '' then '' else @contract end
		AND '' = case when @actno = '-1' then '' else @actno end
		AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
		AND ISNULL(OHBUDGETS.DIVID, -1) = case when @divid = -1 then ISNULL(OHBUDGETS.DIVID, -1) else @divid end
		group by
		OHBUDGETS.BORGID, OHBUDGETS.YEARNO, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE, OHBUDGETS.DIVID, FC.FCAMOUNT

		union all

		SELECT BUDGETS.BORGID, B.CURRENTYEAR as YEAR, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE,
		'Contracts' ALLOCATION,
		BUDGETS.CONTRACTNO as CONTRACT,
		ACTIVITIES.ACTNUMBER,
		-1 as PLANTDIVID,
		-1 DIVID,
		0 COMMITED, 0 ACCRUAL, 0 ACCTUAL,
		sum(case when B.CURRENTYEAR = BUDGETS.YEARNO AND BUDGETS.PERIOD = B.PERIOD then case when BUDGETS.BUDGETFE = 0 then BUDGETS.BUDGET else BUDGETS.BUDGETFE end else 0 end) PERIODBUDGET,
		sum(case when B.CURRENTYEAR = BUDGETS.YEARNO AND BUDGETS.PERIOD <= B.PERIOD then case when BUDGETS.BUDGETFE = 0 then BUDGETS.BUDGET else BUDGETS.BUDGETFE end else 0 end) TOPERIODBUDGET,
		sum(case when B.CURRENTYEAR = BUDGETS.YEARNO then case when BUDGETS.BUDGETFE = 0 then BUDGETS.BUDGET else BUDGETS.BUDGETFE end else 0 end) YEARBUDGET,
		sum(case when BUDGETS.BUDGETFE = 0 then BUDGETS.BUDGET else BUDGETS.BUDGETFE end) LTDBUDGET,
		0 UNAPPROVED
		FROM BUDGETS
		INNER JOIN BORGS B on B.BORGID = BUDGETS.BORGID
		INNER JOIN LEDGERCODES LC on LC.LedgerID = BUDGETS.LEDGERID
		INNER JOIN ACTIVITIES ON BUDGETS.ACTIVITYID = ACTIVITIES.ACTID
		WHERE LC.LEDGERCODE = case when @ledgerCode = '' then LC.LEDGERCODE else @ledgerCode end
		AND BUDGETS.BORGID = case when @orgid = -1 then BUDGETS.BORGID else @orgid end
		AND B.CURRENTYEAR = case when @year = -1 then B.CURRENTYEAR else @year end
		AND B.PERIOD = case when @period = -1 then B.PERIOD else @period end
		AND B.CURRENCY = case when @curr = '' then B.CURRENCY else @curr end
		AND isnull(BUDGETS.CONTRACTNO, '') = case when @contract = '' then isnull(BUDGETS.CONTRACTNO, '') else @contract end
		AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
		AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
		AND -1 = case when @divid = -1 then -1 else @divid end
		group by
		BUDGETS.BORGID, B.CURRENTYEAR, B.PERIOD, B.CURRENCY,
		LC.LEDGERCODE, BUDGETS.CONTRACTNO, ACTIVITIES.ACTNUMBER

		union all

		select
		AC.BORGID, AC.YEAR, B.PERIOD, B.CURRENCY,
		AC.LEDGERCODE,
		AC.ALLOCATION ALLOCATION,
		ISNULL(CONTRACTS.CONTRNUMBER, '') CONTRACT,
		ISNULL(ACTIVITIES.ACTNUMBER, '') ACTNUMBER,
		ISNULL(PLANTANDEQ.DIVID, -1) PLANTDIVID,
		ISNULL(DIVISIONS.DIVID, -1) DIVID,
		0 COMMITED,
		--sum(AC.HOMECURRAMOUNT) ACCRUAL,
    sum(case when AC.DEBIT > 0 then AC.HOMEAMOUNT else -AC.HOMEAMOUNT end) ACCRUAL,   
		0 ACCTUAL, 0 PERIODBUDGET, 0 TOPERIODBUDGET, 0 YEARBUDGET, 0 LTDBUDGET, 0 UNAPPROVED
		from (
			/*Deliveries*/ 
			SELECT Dlvrdate AS Pdate, 
			'DELACC' AS Batchref, 
			LEFT(Dlvrno,10) AS Transref, 
			Ledgercodes.Ledgercode, 
			Contracts.Contrnumber AS Contract, 
			LEFT(rtrim(ltrim(replace(replace(replace(cast(ORDITEMS.Itemdescription as nvarchar(MAX)),' ',''),char(10),''),char(13),' '))) + ' ORDNO:' + Ord.Ordnumber, 255) AS Description, 
			Ord.Currency, 
			case when (Deliveries.Dlvrqty - Deliveries.ReconQty) > 0 then round((((Deliveries.Dlvrqty - Deliveries.ReconQty) * ISNULL(DELIVERIES.PRICE, Orditems.Price)) * (1 - (Orditems.Discount / 100))) + abs(MT.REIMBTAX), isnull(CURRENCIES.DECIMALS, 2)) else 0 end AS debit, 
			case when (Deliveries.Dlvrqty - Deliveries.ReconQty) < 0 then round(((abs(Deliveries.Dlvrqty - Deliveries.ReconQty) * ISNULL(DELIVERIES.PRICE, Orditems.Price)) * (1 - (Orditems.Discount / 100))) + abs(MT.REIMBTAX), isnull(CURRENCIES.DECIMALS, 2)) else 0 end AS credit, 
			Suppliers.Suppcode AS Credno, 
			Suppliers.Suppname AS Credrec, 
			' ' AS Debtrec, 
			' ' AS Subbrec, 
			Orditems.Penumber AS Plantno, 
			isnull(i.stkcode, ' ') AS Stockno, 
			isnull(i.stkstore, ' ') as store, 
			--(Deliveries.Dlvrqty-Deliveries.ReconQty) AS Quantity, 
      (DELIVERIES.DLVRQTY - DELIVERIES.RECONQTY) * case when isnull(i.stkid, -2) = isnull(ORDITEMS.STOCKID, -1) then case when ORDITEMS.STKCONVERTFLAG = 0 THEN 1 / case when isnull(ORDITEMS.STKBUYCONV, i.STKBUYCONV) = 0 then 1 else isnull(ORDITEMS.STKBUYCONV, i.STKBUYCONV) end ELSE case when isnull(ORDITEMS.STKBUYCONV, i.STKBUYCONV) = 0 then 1 else isnull(ORDITEMS.STKBUYCONV, i.STKBUYCONV) end END else 1 end as Quantity,
			Orditems.Uom AS Unit, 
			LEFT(Deliveries.Grnno,12) AS Grnno, 
			round(cast((ABS(DELIVERIES.DLVRQTY-DELIVERIES.RECONQTY) * ((ISNULL(DELIVERIES.PRICE, ORDITEMS.PRICE) * (1 - (ORDITEMS.DISCOUNT / 100))) + RA.RAVAL) + abs(MT.REIMBTAX)) 
			 * CASE when (ORD.CURRENCY <> BORGS.CURRENCY and ORD.HOMECURRENCY =  BORGS.CURRENCY) then ord.exchrate when ORD.CURRENCY = EXR.CURRCODE then EXR.RATE else 0 end as decimal(38, 4)), isnull(CURRENCIES.DECIMALS, 2)) AS Homecurramount, 
			round(cast((ABS(DELIVERIES.DLVRQTY-DELIVERIES.RECONQTY) * ((ISNULL(DELIVERIES.PRICE, ORDITEMS.PRICE) * (1 - (ORDITEMS.DISCOUNT / 100))) + RA.RAVAL) + abs(MT.REIMBTAX)) 
			 * CASE when (ORD.CURRENCY <> BORGS.CURRENCY and ORD.HOMECURRENCY =  BORGS.CURRENCY) then ord.exchrate when ORD.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end as decimal(38, 4)), isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT, 
			Contracts.Contrname, 
			Ledgercodes.Ledgername, 
			Projname AS Projname, 
			Projnumber AS Projnumber, 
			Deliveries.Lyear AS Year, 
			Deliveries.Period AS Period, 
			ORD.ORDNUMBER as ORDERNO, 
			ORDITEMS.ALLOCATION, 
			'Deliveries' as accrual,
			ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) as BORGID,
			CONTRACTS.CONSTATUS, isnull(ACTIVITIES.ACTNAME, ' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			ORDITEMS.STOCKID,
			ISNULL(DELIVERIES.PRICE, Orditems.Price) * (1 - (Orditems.Discount / 100)) as RATE,
			isnull(ORDITEMS.DivisionID, -1) as DIVID,
			DELIVERIES.DLVRID,
			DELIVERIES.DLVRNO,
			ORDITEMS.VATID
			FROM DELIVERIES
			INNER JOIN ORDITEMS ON DELIVERIES.ORDID = ORDITEMS.ORDID AND DELIVERIES.ORDITEMLINENO = ORDITEMS.LINENUMBER
			INNER JOIN ORD ON DELIVERIES.ORDID = ORD.ORDID
			INNER JOIN LEDGERCODES ON ORDITEMS.GLCODEID = LEDGERCODES.LedgerID
			LEFT OUTER JOIN CONTRACTS ON CONTRACTS.CONTRID = ORDITEMS.CONTRACTID
			LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
			LEFT OUTER JOIN SUPPLIERS ON ORD.SUPPID = SUPPLIERS.SUPPID
			LEFT OUTER JOIN ACTIVITIES ON ORDITEMS.ACTID = ACTIVITIES.ACTID
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = ORD.CURRENCY
			LEFT OUTER JOIN INVENTORY i ON i.stkid = ORDITEMS.STOCKID
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = Orditems.Penumber
      OUTER APPLY(SELECT ISNULL(SUM(ISNULL(TAX, 0)), 0) REIMBTAX FROM GETVIEWTAXTRANS('', ((Deliveries.Dlvrqty - Deliveries.ReconQty) * ISNULL(DELIVERIES.PRICE, ORDITEMS.PRICE)) * (1 - (Orditems.Discount / 100)), ORDITEMS.VATID, ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID), Ord.Currency) WHERE ISNULL(ISREIMB, -1) = 0) MT
			 CROSS APPLY (
			  select isnull(SUM(round(RIA.VALUE / OI.QTY, 4)), 0) RAVAL
			  from ORD O
			  INNER JOIN ORDITEMS OI on O.ORDID = OI.ORDID
			  INNER JOIN REQITEMSADD RIA ON RIA.LINENUMBER = OI.LINENUMBER AND RIA.REQID = O.REQID
			  inner join REQADD on RIA.RAID = REQADD.RAID
			  WHERE REQADD.ISCOST = 1
			  AND OI.ORDID = DELIVERIES.ORDID
			  AND OI.LINENUMBER = DELIVERIES.ORDITEMLINENO
              AND OI.QTY <> 0
			 ) RA
			 OUTER APPLY (
			 SELECT
			 RTrim(CURR.CURRCODE) CURRCODE,
			 isnull(CCEE.RATE, -1) as RATE,
			 isnull(CURR.DECIMALS, 2) DECIMALS
			 from CURRENCIES CURR
			 INNER JOIN (
			  select CCE.FROMCURR, CCE.RATE
			  FROM BORGS B
			  INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
			  INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
			  INNER JOIN (
			   SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
			   FROM CURREXCH C
			   GROUP BY GROUPID, FROMCURR, TOCURR) ce
			  ON CCE.GROUPID = ce.groupid
			  AND CCE.FROMCURR = ce.fromcurr
			  AND CCE.TOCURR = ce.tocurr
			  AND CCE.STARTDATE = ce.startdate
			  WHERE B.BORGID = ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID)
			  and CCG.DISABLED = 0
			  ) CCEE
			 ON CCEE.FROMCURR = CURR.CURRCODE
			 WHERE CURR.CURRCODE = ORD.CURRENCY
			 ) EXR
			INNER JOIN BORGS on BORGS.BORGID = ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID)
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Deliveries'
			WHERE ACCRUALS.INUSE = 1 AND ORD.ORDSTATUSID IN (274, 41) AND ALLOCATED = 0
			and Ledgercodes.LEDGERCODE = case when @ledgerCode = '' then Ledgercodes.LEDGERCODE else @ledgerCode end
			AND ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) = case when @orgid = -1 then ISNULL(ISNULL(ORDITEMS.TBORGID, PROJECTS.BORGID), ORD.BORGID) else @orgid end
			AND Deliveries.Lyear = case when @year = -1 then Deliveries.Lyear else @year end
			AND Deliveries.Period = case when @period = -1 then Deliveries.Period else @period end
			AND Ord.Currency = case when @curr = '' then Ord.Currency else @curr end
			AND isnull(Contracts.Contrnumber, '') = case when @contract = '' then isnull(Contracts.Contrnumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(ORDITEMS.DivisionID, -1) = case when @divid = -1 then isnull(ORDITEMS.DivisionID, -1) else @divid end
    
			UNION ALL
			/*Clockcards*/
			SELECT GetDAte() as PDate,
			'WGSACC' as Batchref,
			'WGSACC' as Transref,
			CLOCKCARDS.LEDGERCODE,
			CLOCKCARDS.CONTRNUMBER,
			'Wages & Salaries Accruals' as Description,
			BORGS.CURRENCY as Currency,
			round(SUM(CLOCKCARDS.COST), isnull(CURRENCIES.DECIMALS, 2)) AS [debit],
			0 as Credit,
			' ' AS credno,
			' ' AS credrec,
			' ' AS debtrec,
			' ' AS subrec,
			CLOCKCARDS.PENUMBER as Plantno,
			' ' AS stockno, 
			' ' as store,
			0 as quantity,
			'Sum' as unit,
			' ' AS Grnno,
			0 as homecurramount,
			round(SUM(CLOCKCARDS.COST), isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT,
			Contrname as Contrname,
			ledgername as ledgername,
			Projname AS Projname,
			Projnumber AS Projnumber,
			YEARNO as [YEAR],
			PERIODNO as period,
			' ' AS ORDERNO,
			CLOCKCARDS.ALLOCATION collate SQL_Latin1_General_CP1_CI_AS,
			'Wages & Salaries Clock Cards Accruals' as accrual,
			CASE CLOCKCARDS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END BORGID,
			CONTRACTS.CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			isnull(CLOCKCARDS.DIVID, -1) as DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM CLOCKCARDS
			INNER JOIN PAYROLLS ON CLOCKCARDS.PAYROLLID = PAYROLLS.PAYROLLID AND CLOCKCARDS.YEARNO = PAYROLLS.CURRYEARNO AND CLOCKCARDS.RUNNO = PAYROLLS.RUNNO AND CLOCKCARDS.PERIODNO = PAYROLLS.CURRPERIOD
			INNER JOIN LEDGERCODES ON CLOCKCARDS.LEDGERID = LEDGERCODES.LEDGERID
			LEFT OUTER JOIN CONTRACTS ON CONTRACTS.CONTRID = CLOCKCARDS.CONTRID
			LEFT OUTER JOIN PROJECTS ON CONTRACTS.PROJID = PROJECTS.PROJID
			LEFT OUTER JOIN ACTIVITIES ON CLOCKCARDS.ACTID = ACTIVITIES.ACTID
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = CLOCKCARDS.PENUMBER
			LEFT OUTER JOIN DIVISIONS ON DIVISIONS.DIVID = CLOCKCARDS.DIVID
			INNER JOIN BORGS on BORGS.BORGID = CASE CLOCKCARDS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Clockcards'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			WHERE ACCRUALS.INUSE = 1
			and CLOCKCARDS.LEDGERCODE = case when @ledgerCode = '' then CLOCKCARDS.LEDGERCODE else @ledgerCode end
			AND CASE CLOCKCARDS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END = case when @orgid = -1 then CASE CLOCKCARDS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END else @orgid end
			AND YEARNO = case when @year = -1 then YEARNO else @year end
			AND PERIODNO = case when @period = -1 then PERIODNO else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(CLOCKCARDS.CONTRNUMBER, '') = case when @contract = '' then isnull(CLOCKCARDS.CONTRNUMBER, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(CLOCKCARDS.DIVID, -1) = case when @divid = -1 then isnull(CLOCKCARDS.DIVID, -1) else @divid end
			GROUP BY YEARNO, Periodno, CLOCKCARDS.ALLOCATION, CLOCKCARDS.CONTRNUMBER, CLOCKCARDS.LEDGERCODE, CLOCKCARDS.PENUMBER, CLOCKCARDS.DIVID, PAYROLLS.RUNNO, CASE CLOCKCARDS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END, CONTRACTS.CONSTATUS, Contrname, ledgername, Projname, Projnumber, ACTIVITIES.ACTNAME, ACTIVITIES.ACTNUMBER, ACTIVITIES.ACTUNIT, CURRENCIES.DECIMALS, BORGS.CURRENCY HAVING (SUM(CLOCKCARDS.COST) <> 0)
    
			UNION ALL
			/*Advised Amounts*/
			SELECT GetDAte() AS Pdate,
			'WGSACC' as Batchref,
			'WGSACC' as Transref,
			ADVAMOUNTS.LEDGERCODE,
			ADVAMOUNTS.CONTRNUMBER,
			'Advised Amount Accruals' as [Description],
			BORGS.CURRENCY as currency,
			round(SUM(ADVAMOUNTS.COST), isnull(CURRENCIES.DECIMALS, 2)) AS [Debit],
			0 as [Credit],
			' ' AS credno,
			' ' AS credrec,
			' ' AS debtrec,
			' ' AS subrec,
			' ' AS Plantno,
			' ' AS stockno,
			' ' as store,
			0 as quantity,
			'Sum' as unit,
			' ' AS Grnno,
			0 as homecurramount,
			round(SUM(ADVAMOUNTS.COST), isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT,
			Contrname as Contrname,
			ledgername as ledgername,
			Projname AS Projname,
			Projnumber AS Projnumber,
			YEARNO as [YEAR],
			PERIODNO as period,
			' ' AS ORDERNO,
			allocation,
			'Wages & Salaries Advised Amounts Accruals' as accrual,
			CASE ADVAMOUNTS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END BORGID,
			CONTRACTS.CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			isnull(ADVAMOUNTS.DIVID, -1) as DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM ADVAMOUNTS
			INNER JOIN PAYROLLS ON ADVAMOUNTS.PAYROLLID = PAYROLLS.PAYROLLID AND ADVAMOUNTS.YEARNO = PAYROLLS.CURRYEARNO AND ADVAMOUNTS.RUNNO = PAYROLLS.RUNNO AND ADVAMOUNTS.PERIODNO = PAYROLLS.CURRPERIOD
			INNER JOIN LEDGERCODES ON ADVAMOUNTS.LEDGERID = LEDGERCODES.LEDGERID
			LEFT OUTER JOIN CONTRACTS ON CONTRACTS.CONTRID = ADVAMOUNTS.CONTRID
			LEFT OUTER JOIN PROJECTS ON CONTRACTS.PROJID = PROJECTS.PROJID
			LEFT OUTER JOIN ACTIVITIES ON ADVAMOUNTS.ACTID = ACTIVITIES.ACTID
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = ADVAMOUNTS.PENUMBER
			LEFT OUTER JOIN DIVISIONS ON DIVISIONS.DIVID = ADVAMOUNTS.DIVID
			INNER JOIN BORGS on BORGS.BORGID = CASE ADVAMOUNTS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Advised Amounts'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			WHERE ACCRUALS.INUSE = 1
			and ADVAMOUNTS.LEDGERCODE = case when @ledgerCode = '' then ADVAMOUNTS.LEDGERCODE else @ledgerCode end
			AND CASE ADVAMOUNTS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END = case when @orgid = -1 then CASE ADVAMOUNTS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END else @orgid end
			AND YEARNO = case when @year = -1 then YEARNO else @year end
			AND PERIODNO = case when @period = -1 then PERIODNO else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(ADVAMOUNTS.CONTRNUMBER, '') = case when @contract = '' then isnull(ADVAMOUNTS.CONTRNUMBER, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(ADVAMOUNTS.DIVID, -1) = case when @divid = -1 then isnull(ADVAMOUNTS.DIVID, -1) else @divid end
			GROUP BY YEARNO, PERIODNO,ADVAMOUNTS.ALLOCATION, ADVAMOUNTS.CONTRNUMBER, ADVAMOUNTS.LEDGERCODE, ADVAMOUNTS.PENUMBER, CASE ADVAMOUNTS.ALLOCATION WHEN 'CONTRACTS' THEN PROJECTS.BORGID WHEN 'OVERHEADS' THEN DIVISIONS.BORGID WHEN 'PLANT' THEN PLANTANDEQ.BORGID WHEN 'BALANCE SHEET' THEN PAYROLLS.BORGID END, CONTRACTS.CONSTATUS, Contrname, ledgername, Projname, Projnumber, ACTIVITIES.ACTNAME, ACTIVITIES.ACTNUMBER, ACTIVITIES.ACTUNIT, ADVAMOUNTS.DIVID, CURRENCIES.DECIMALS, BORGS.CURRENCY HAVING (SUM(ADVAMOUNTS.COST) <> 0) AND (ADVAMOUNTS.ALLOCATION <> '')
    
			UNION ALL
			/*Plant Based Hire*/
			SELECT PlantHirePBReturnsHead.PBRHDate AS Pdate,
			'PLTACC' AS BatchRef,
			'PLTACC' AS Transref,
			PlantHirePBHeader.PlantDCostGl AS LedgerCode,
			isnull(PlantHirePBReturnsHead.ContrNumber, ' ') AS Contract,
			'Plant Based Hire Accrual' AS Description,
			BORGS.CURRENCY AS currency,
			CASE WHEN sum(PlantHirePBReturnsValues.PBRDTotalAmount) > 0 THEN round(ABS(sum(PlantHirePBReturnsValues.PBRDTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) ELSE 0 END as Debit,
			CASE WHEN sum(PlantHirePBReturnsValues.PBRDTotalAmount) > 0 THEN 0 ELSE round(ABS(sum(PlantHirePBReturnsValues.PBRDTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) END as Credit,
			' ' AS Credno,
			' ' AS CredRec,
			' ' AS DebtRec,
			' ' AS Subbrec,
			PlantHirePBHeader.PeNumber AS PlantNo,
			' ' AS Stockno,
			' ' as store,
			0 AS Quantity,
			' ' AS Unit,
			' ' AS Grnno,
			0 AS HomeCurrAmount,
			round(ABS(sum(PlantHirePBReturnsValues.PBRDTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) as HOMEAMOUNT,
			isnull(CONTRACTS.CONTRNAME, ' ') CONTRNAME,
			LEDGERCODES.LedgerName,
			isnull(PROJECTS.ProjName, ' ') ProjName,
			isnull(PROJECTS.ProjNumber, ' ') ProjNumber,
			PlantHirePBHeader.BHRHFinYear,
			PlantHirePBHeader.BHRHFinPeriod,
			' ' AS ORDERNO,
			case when PLANTHIREPBRETURNSHEAD.CONTRNUMBER is not null then 'Contracts' else case when PLANTHIREPBRETURNSHEAD.DIVTOID is not null then 'Overheads' else 'Balance Sheet' end end as allocation,
			'Plant Based Hire Accrual' as accrual,
			case when PLANTHIREPBRETURNSHEAD.CONTRNUMBER is not null then PROJECTS.BORGID else case when PLANTHIREPBRETURNSHEAD.DIVTOID is not null then DIVISIONS.BORGID else PLANTHIREPBHEADER.BORGID end end BORGID,
			isnull(CONTRACTS.CONSTATUS, 0) CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			isnull(PLANTHIREPBRETURNSHEAD.DIVTOID, -1) AS DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM PlantHirePBHeader
			INNER JOIN PlantHirePBReturnsHead ON PlantHirePBHeader.PBHid = PlantHirePBReturnsHead.PBHid
			INNER JOIN PlantHirePBReturnsValues ON PlantHirePBReturnsHead.PBRHid = PlantHirePBReturnsValues.PBRHid
			INNER JOIN LEDGERCODES ON PlantHirePBHeader.PlantDCostGl = LEDGERCODES.LedgerCode
			LEFT OUTER JOIN CONTRACTS ON PLANTHIREPBRETURNSHEAD.ContrNumber = CONTRACTS.CONTRNUMBER
			LEFT OUTER JOIN PROJECTS ON CONTRACTS.PROJID = PROJECTS.PROJID
			LEFT OUTER JOIN ACTIVITIES ON PlantHirePBReturnsHead.ACTNUMBER = ACTIVITIES.ACTNUMBER
			LEFT OUTER JOIN DIVISIONS ON PlantHirePBReturnsHead.DivToID = DIVISIONS.DIVID
			INNER JOIN BORGS on BORGS.BORGID = case when PLANTHIREPBRETURNSHEAD.CONTRNUMBER is not null then PROJECTS.BORGID else case when PLANTHIREPBRETURNSHEAD.DIVTOID is not null then DIVISIONS.BORGID else PLANTHIREPBHEADER.BORGID end end
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Plant Based Hire'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = PlantHirePBHeader.PeNumber
			WHERE ACCRUALS.INUSE = 1 AND PlantHirePBHeader.PBHClosed <> 1 AND PLANTHIREPBRETURNSHEAD.PBRHPostFlag < 3
			and PlantHirePBHeader.PlantDCostGl = case when @ledgerCode = '' then PlantHirePBHeader.PlantDCostGl else @ledgerCode end
			AND case when PLANTHIREPBRETURNSHEAD.CONTRNUMBER is not null then PROJECTS.BORGID else case when PLANTHIREPBRETURNSHEAD.DIVTOID is not null then DIVISIONS.BORGID else PLANTHIREPBHEADER.BORGID end end = case when @orgid = -1 then case when PLANTHIREPBRETURNSHEAD.CONTRNUMBER is not null then PROJECTS.BORGID else case when PLANTHIREPBRETURNSHEAD.DIVTOID is not null then DIVISIONS.BORGID else PLANTHIREPBHEADER.BORGID end end else @orgid end
			AND PlantHirePBHeader.BHRHFinYear = case when @year = -1 then PlantHirePBHeader.BHRHFinYear else @year end
			AND PlantHirePBHeader.BHRHFinPeriod = case when @period = -1 then PlantHirePBHeader.BHRHFinPeriod else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(PlantHirePBReturnsHead.ContrNumber, '') = case when @contract = '' then isnull(PlantHirePBReturnsHead.ContrNumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(PLANTHIREPBRETURNSHEAD.DIVTOID, -1) = case when @divid = -1 then isnull(PLANTHIREPBRETURNSHEAD.DIVTOID, -1) else @divid end
			GROUP BY PlantHirePBReturnsHead.PBRHDate, PlantHirePBHeader.PlantDCostGl, PlantHirePBReturnsHead.ContrNumber, PlantHirePBHeader.PeNumber, CONTRACTS.CONTRNAME, LEDGERCODES.LedgerName, PROJECTS.ProjName, PROJECTS.ProjNumber, PlantHirePBHeader.BHRHFinYear, PlantHirePBHeader.BHRHFinPeriod, PlantHirePBHeader.BORGID, CONTRACTS.CONSTATUS, ACTIVITIES.ACTNAME, ACTIVITIES.ACTNUMBER, ACTIVITIES.ACTUNIT, CURRENCIES.DECIMALS, PROJECTS.BORGID, PLANTHIREPBRETURNSHEAD.DIVTOID, DIVISIONS.BORGID, PLANTHIREPBHEADER.BORGID, BORGS.CURRENCY
    
			UNION ALL
			/*Plant Req Based Hire*/
			SELECT ReqPlantHireReturnsHead.HireRToDate,
			'PLTACC' AS BatchRef,
			'PLTACC' AS Transref,
			PlantHireDetail.PlantDCostGl AS LedgeCode,
			isnull(PlantHireHeader.ContrNumber, ' ') AS Contract,
			'Req Based Hire Accrual' AS Description,
			BORGS.CURRENCY AS currency,
			CASE WHEN SUM(ReqPlantHireReturns.HireRTotalAmount) > 0 THEN round(ABS(SUM(ReqPlantHireReturns.HireRTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) ELSE 0 END AS Debit,
			CASE WHEN SUM(ReqPlantHireReturns.HireRTotalAmount) > 0 THEN 0 ELSE round(ABS(SUM(ReqPlantHireReturns.HireRTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) END AS Credit,
			' ' AS Credno,
			' ' AS CredRec,
			' ' AS DebtRec,
			' ' AS Subbrec,
			ReqPlantHireReturnsHead.PeNumber AS PlantNo,
			' ' AS Stockno,
			' ' as store,
			0 AS Quantity,
			' ' AS Unit,
			' ' AS Grnno,
			0 AS HomeCurrAmount,
			round(ABS(SUM(ReqPlantHireReturns.HireRTotalAmount)), isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT,
			isnull(CONTRACTS.CONTRNAME, ' ') CONTRNAME,
			LEDGERCODES.LedgerName,
			isnull(PROJECTS.ProjName, ' ') ProjName,
			isnull(PROJECTS.ProjNumber, ' ') ProjNumber,
			BORGS.CURRENTYEAR AS FinYear,
			ReqPlantHireReturnsHead.HireRPeriod,
			' ' AS ORDERNO,
			LEDGERCODES.LEDGERALLOC as allocation,
			'Req Based Hire Accrual' as accrual,
			case when LEDGERCODES.LEDGERALLOC = 'Contracts' then PROJECTS.BORGID else case when LEDGERCODES.LEDGERALLOC = 'Overheads' then DIVISIONS.BORGID else PlantHireHeader.BORGID end end BORGID,
			isnull(CONTRACTS.CONSTATUS, 0) CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			isnull(DIVISIONS.DIVID, -1) AS DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM PlantHireDetail
			INNER JOIN PlantHireHeader ON PlantHireDetail.HireHNumber = PlantHireHeader.HireHNumber
			INNER JOIN ReqPlantHireReturns
			INNER JOIN ReqPlantHireReturnsHead ON ReqPlantHireReturns.IDR = ReqPlantHireReturnsHead.ID ON PlantHireDetail.HireHNumber = ReqPlantHireReturnsHead.HireHNumber AND PlantHireDetail.PeNumber = ReqPlantHireReturnsHead.PeNumber
			LEFT OUTER JOIN CONTRACTS ON PlantHireHeader.ContrNumber = CONTRACTS.CONTRNUMBER
			LEFT OUTER JOIN PROJECTS ON CONTRACTS.PROJID = PROJECTS.PROJID
			INNER JOIN LEDGERCODES ON PlantHireDetail.PlantDCostGl = LEDGERCODES.LedgerCode
			LEFT OUTER JOIN ACTIVITIES ON ReqPlantHireReturnsHead.ACTNUMBER = ACTIVITIES.ACTNUMBER
			LEFT OUTER JOIN DIVISIONS ON PlantHireHeader.DIVID = DIVISIONS.DIVID
			INNER JOIN BORGS on BORGS.BORGID = case when LEDGERCODES.LEDGERALLOC = 'Contracts' then PROJECTS.BORGID else case when LEDGERCODES.LEDGERALLOC = 'Overheads' then DIVISIONS.BORGID else PlantHireHeader.BORGID end end
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Plant Req Based Hire'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = ReqPlantHireReturnsHead.PeNumber
			WHERE ACCRUALS.INUSE = 1 AND PlantHireHeader.HireHRemove <> 1 AND PlantHireDetail.HireRRemove <> 1 AND ReqPlantHireReturnsHead.HireRPostFlag < 3
			and PlantHireDetail.PlantDCostGl = case when @ledgerCode = '' then PlantHireDetail.PlantDCostGl else @ledgerCode end
			AND case when LEDGERCODES.LEDGERALLOC = 'Contracts' then PROJECTS.BORGID else case when LEDGERCODES.LEDGERALLOC = 'Overheads' then DIVISIONS.BORGID else PlantHireHeader.BORGID end end = case when @orgid = -1 then case when LEDGERCODES.LEDGERALLOC = 'Contracts' then PROJECTS.BORGID else case when LEDGERCODES.LEDGERALLOC = 'Overheads' then DIVISIONS.BORGID else PlantHireHeader.BORGID end end else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND ReqPlantHireReturnsHead.HireRPeriod = case when @period = -1 then ReqPlantHireReturnsHead.HireRPeriod else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(PlantHireHeader.ContrNumber, '') = case when @contract = '' then isnull(PlantHireHeader.ContrNumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(DIVISIONS.DIVID, -1) = case when @divid = -1 then isnull(DIVISIONS.DIVID, -1) else @divid end
			GROUP BY ReqPlantHireReturnsHead.HireRToDate, PlantHireDetail.PlantDCostGl, PlantHireHeader.ContrNumber, ReqPlantHireReturnsHead.PeNumber, CONTRACTS.CONTRNAME, LEDGERCODES.LedgerName, PROJECTS.ProjName, PROJECTS.ProjNumber, ReqPlantHireReturnsHead.HireRPeriod, PlantHireHeader.BORGID, CONTRACTS.CONSTATUS, ACTIVITIES.ACTNAME, ACTIVITIES.ACTNUMBER, ACTIVITIES.ACTUNIT, CURRENCIES.DECIMALS, LEDGERCODES.LEDGERALLOC, PROJECTS.BORGID, DIVISIONS.BORGID, DIVISIONS.DIVID, BORGS.CURRENCY, BORGS.CURRENTYEAR
    
			UNION ALL
			/*Subc Recons*/
			SELECT S.PostDate AS Pdate,
			'SUBACC' as Batchref,
			'SUBACC' as Transref,
			case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end as Ledgercode,
			Contracts.ContrNumber as Contract,
			'Sub Contractors Certificates' as Description,
			S.currency as Currency,
            CASE WHEN SAMOUNT.AMOUNT > 0 THEN SAMOUNT.AMOUNT ELSE 0 END as Debit,
            CASE WHEN SAMOUNT.AMOUNT > 0 THEN 0 ELSE ABS(SAMOUNT.AMOUNT) END as Credit,
			SUBCONTRACTORS.SubNumber as Credno,
			' ' AS Credrec,
			' ' AS Debtrec,
			Subcontractors.Subname AS Subbrec,
			' ' AS Plantno,
			' ' AS Stockno,
			' ' as store,
			0 as Quantity,
			' ' AS Unit,
			' ' AS Grnno,
			cast(abs(SAMOUNT.AMOUNT)
			* CASE when S.CURRENCY <> BORGS.CURRENCY and SB.CURRENCY = BORGS.CURRENCY then S.EXCHRATE when S.CURRENCY = EXR.CURRCODE then EXR.RATE else 0 end as decimal(38, 4)) as HOMECURRAMOUNT,
			cast(abs(SAMOUNT.AMOUNT)
			* CASE when S.CURRENCY <> BORGS.CURRENCY and SB.CURRENCY = BORGS.CURRENCY then S.EXCHRATE when S.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end as decimal(38, 4)) as HOMEAMOUNT,
			Contracts.Contrname,
			LEDGERCODES.LedgerName,
			Projname as Projname,
			Projnumber as Projnumber,
			BORGS.CURRENTYEAR as Year,
			BORGS.PERIOD as Period,
			' ' AS ORDERNO,
			ALLOCATION,
			'Sub Contractors Accruals' as accrual,
			case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end ORGID,
			CONTRACTS.CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			isnull(S.DIVID, -1) as DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM SUBCRECONS S
			INNER JOIN SUBCONTRACTORS ON S.SubConNumber = SUBCONTRACTORS.SubID
			LEFT OUTER JOIN CONTRACTS ON S.Contract = CONTRACTS.CONTRID
			LEFT OUTER JOIN PROJECTS on CONTRACTS.projid = PROJECTS.projid
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = S.currency
			LEFT OUTER JOIN LEDGERCODES ON LEDGERCODES.LedgerCode = case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end
			LEFT OUTER JOIN BORGS SB ON S.ORGID = SB.BORGID
			 OUTER APPLY (
			 SELECT
			 RTrim(CURR.CURRCODE) CURRCODE,
			 isnull(CCEE.RATE, -1) as RATE,
			 isnull(CURR.DECIMALS, 2) DECIMALS
			 from CURRENCIES CURR
			 INNER JOIN (
			  select CCE.FROMCURR, CCE.RATE
			  FROM BORGS B
			  INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
			  INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
			  INNER JOIN (
			   SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
			   FROM CURREXCH C
			   GROUP BY GROUPID, FROMCURR, TOCURR) ce
			  ON CCE.GROUPID = ce.groupid
			  AND CCE.FROMCURR = ce.fromcurr
			  AND CCE.TOCURR = ce.tocurr
			  AND CCE.STARTDATE = ce.startdate
			  WHERE B.BORGID = case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end
			  and CCG.DISABLED = 0
			  ) CCEE
			 ON CCEE.FROMCURR = CURR.CURRCODE
			 WHERE CURR.CURRCODE = S.CURRENCY
			 ) EXR
            OUTER APPLY (
	          select ACTID, Sum(amount) as AMOUNT
              from (
	              Select
	              ACTIVITIES.ACTID as ACTID,
	              sum((ACCBOQDETAIL.[PROG QTY] - case when rtrim(isnull(SS.code,'')) = '' or rtrim(isnull(SS.code,'')) = 'PO' then 0 else ACCBOQDetail.[prev QTY] end) * ACCBOQDETAIL.RATE) as amount
	              FROM ACCBOQHEADER
                INNER JOIN SUBCRECONS SS on SS.RECONID = S.RECONID
	              INNER JOIN ACCBOQDETAIL ON ACCBOQHEADER.HEADERID = ACCBOQDETAIL.HEADERID
	              LEFT OUTER JOIN ACTIVITIES ON ACCBOQDETAIL.ACTID = ACTIVITIES.ACTID
	              WHERE ACCBOQHEADER.RECONID = S.RECONID
	              and ACCBOQDetail.[use] = 1 and ACCBOQDetail.ReconHistID = -1 and ACCBOQDetail.IsSysEntry = 0
		          AND (
			          (isnull(ACCBOQDETAIL.FILETYPE, '') = '' and S.PROVID = 1)
		          OR
			          (isnull(ACCBOQDETAIL.FILETYPE, '') <> '' AND ACCBOQDETAIL.Status = 'A' and S.PROVID2 = 1)
		          )
		          GROUP BY ACTIVITIES.ACTID
                  UNION ALL
		          Select
		          ACTIVITIES.ACTID as ACTID,
		          sum(-1 * ACCBOQPREV.AMOUNT) as amount
		          FROM ACCBOQPREV
		          LEFT OUTER JOIN ACTIVITIES ON ACCBOQPREV.ACTID = ACTIVITIES.ACTID
		          WHERE ACCBOQPREV.RECONID = S.RECONID
		          AND (
			          (ACCBOQPREV.[FILETYPE] = 'WD' and S.PROVID = 1)
		          OR
			          (ACCBOQPREV.[FILETYPE] = 'VAR' and S.PROVID2 = 1)
		          )
		          GROUP BY ACTIVITIES.ACTID
		          union all
		          SELECT S.ACTIVITY as ACTID, 0 as AMOUNT
		          ) D
	          where (amount <> 0 or S.ACTIVITY = D.ACTID)
	          group by ACTID
            ) BOQ
            outer apply (
	          select round(
		            case WHEN S.PROVID = 0 THEN case when BOQ.ACTID = S.ACTIVITY then isnull(S.WORKDONETHISMONTH, 0) else 0 end ELSE isnull(BOQ.AMOUNT, 0) END 
		            + case WHEN S.PROVID2 = 0 THEN case when BOQ.ACTID = S.ACTIVITY then isnull(S.ADDITIONALTHISMONTH, 0) else 0 end ELSE case when S.PROVID = 0 then isnull(BOQ.AMOUNT, 0) else 0 end END 
		            + case when BOQ.ACTID = S.ACTIVITY then isnull(S.ESCALATIONTHISMONTH, 0) + isnull(S.MOSTHISMONTH, 0) + isnull(S.BFWDTHISMONTH, 0) - isnull(S.DISCOUNTTHISMONTH, 0) else 0 end
		            , isnull(CURRENCIES.DECIMALS, 2)) AMOUNT
            ) SAMOUNT
            left outer JOIN ACTIVITIES ON isnull(BOQ.ACTID, S.ACTIVITY) = ACTIVITIES.ActID
			INNER JOIN BORGS on BORGS.BORGID = case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Subc Recons'
			WHERE ACCRUALS.INUSE = 1 AND S.Posted = 0
			and case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end = case when @ledgerCode = '' then case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end else @ledgerCode end
			AND case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end = case when @orgid = -1 then case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND BORGS.PERIOD = case when @period = -1 then BORGS.PERIOD else @period end
			AND S.currency = case when @curr = '' then S.currency else @curr end
			AND isnull(Contracts.ContrNumber, '') = case when @contract = '' then isnull(Contracts.ContrNumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
			AND isnull(S.DIVID, -1) = case when @divid = -1 then isnull(S.DIVID, -1) else @divid end
            AND SAMOUNT.AMOUNT <> 0 

            UNION ALL

            SELECT S.PostDate as Pdate, 'SUBACC' as Batchref, 'SUBACC' as Transref,
            case when isnull(isnull(CONTRA.LEDGERCODE, S.LEDGER), '') = '' then SUBCONTRACTORS.SUBGLCODE else isnull(CONTRA.LEDGERCODE, S.LEDGER) end as Ledgercode,
            Contracts.ContrNumber as Contract, 'Sub Contractors Certificates Contras' as DESCRIPTION, S.CURRENCY as Currency,
            CASE WHEN SAMOUNT.AMOUNT < 0 THEN ABS(SAMOUNT.AMOUNT) ELSE 0 END as Debit,
            CASE WHEN SAMOUNT.AMOUNT < 0 THEN 0 ELSE ABS(SAMOUNT.AMOUNT) END Credit,
            SUBCONTRACTORS.SubNumber as Credno, ' ' AS Credrec, ' ' AS Debtrec,
            Subcontractors.Subname AS Subbrec, ' ' AS Plantno, ' ' AS Stockno, ' ' as store, 0 as Quantity,
            ' ' AS Unit, ' ' AS  Grnno,
            cast(abs(SAMOUNT.AMOUNT)
			* CASE when S.CURRENCY <> BORGS.CURRENCY and SB.CURRENCY = BORGS.CURRENCY then S.EXCHRATE when S.CURRENCY = EXR.CURRCODE then EXR.RATE else 0 end as decimal(38, 4)) as HOMECURRAMOUNT,
			cast(abs(SAMOUNT.AMOUNT)
			* CASE when S.CURRENCY <> BORGS.CURRENCY and SB.CURRENCY = BORGS.CURRENCY then S.EXCHRATE when S.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end as decimal(38, 4)) as HOMEAMOUNT,
            Contracts.Contrname, Ledgername, Projname as Projname, Projnumber as Projnumber,
			BORGS.CURRENTYEAR as Year,
			BORGS.PERIOD as Period,
            ' ' AS ORDERNO,
            ALLOCATION, 'Sub Contractors Accruals' as accrual,
            case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end ORGID,
            CONTRACTS.CONSTATUS,
            isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME, isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER, ACTIVITIES.ACTUNIT,
            -1 AS STKID, 0 AS RATE, isnull(S.DIVID, -1) as DIV, -1 AS TID, ' ' AS Delno, ' ' AS VATID
            FROM SUBCRECONS S
            inner join SUBCONTRACTORS ON S.SubConNumber = SUBCONTRACTORS.SubID
            LEFT OUTER JOIN CONTRACTS ON S.Contract = CONTRACTS.CONTRID
            left outer join PROJECTS on CONTRACTS.projid = PROJECTS.projid
            LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = S.currency
            LEFT OUTER JOIN DIVISIONS ON DIVISIONS.DIVID = S.DIVID
            LEFT OUTER JOIN LEDGERCODES ON case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end = LEDGERCODES.LEDGERCODE
            LEFT OUTER JOIN BORGS SB ON S.ORGID = SB.BORGID
              OUTER APPLY (
              SELECT
              RTrim(CURR.CURRCODE) CURRCODE,
              isnull(CCEE.RATE, -1) as RATE,
              isnull(CURR.DECIMALS, 2) DECIMALS
              from CURRENCIES CURR
              INNER JOIN (
              select CCE.FROMCURR, CCE.RATE
              FROM BORGS B
              INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
              INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
              INNER JOIN (
                SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
                FROM CURREXCH C
                GROUP BY GROUPID, FROMCURR, TOCURR) ce
              ON CCE.GROUPID = ce.groupid
              AND CCE.FROMCURR = ce.fromcurr
              AND CCE.TOCURR = ce.tocurr
              AND CCE.STARTDATE = ce.startdate
              WHERE B.BORGID = case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end
              and CCG.DISABLED = 0
              ) CCEE
              ON CCEE.FROMCURR = CURR.CURRCODE
              WHERE CURR.CURRCODE = S.CURRENCY
              ) EXR
            OUTER APPLY (
                select ACTID, LEDGERCODE, Sum(amount) as AMOUNT
                from (
                	Select
                	ACTIVITIES.ACTID as ACTID,
                	CONTRAS.CONTRAALLOC LEDGERCODE,
                	sum(CONTRAQTY * CONTRARATE) as amount
                	FROM CONTRAS
                	LEFT OUTER JOIN ACTIVITIES ON CONTRAS.CONTRAACT = ACTIVITIES.ACTNUMBER
                	WHERE CONTRAS.CONTRARECONID = S.RECONID
                	and CONTRAS.ReconHistID = -1 and CONTRAS.IsSysEntry = 0
                	GROUP BY ACTIVITIES.ACTID, CONTRAS.CONTRAALLOC
                	) D
                where (amount <> 0 or S.ACTIVITY = D.ACTID)
                group by ACTID, LEDGERCODE
            ) CONTRA
            outer apply (
                select round(
                	case when CONTRA.AMOUNT is null then isnull(S.CONTRATHISMONTH, 0) ELSE isnull(CONTRA.AMOUNT, 0) END
                	, isnull(CURRENCIES.DECIMALS, 2)) AMOUNT
            ) SAMOUNT
            left outer JOIN ACTIVITIES ON isnull(CONTRA.ACTID, S.ACTIVITY) = ACTIVITIES.ActID
            INNER JOIN BORGS on BORGS.BORGID = case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end
            INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Subc Recons'
			WHERE ACCRUALS.INUSE = 1 AND S.Posted = 0
			and case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end = case when @ledgerCode = '' then case when isnull(S.LEDGER, '') = '' then SUBCONTRACTORS.SUBGLCODE else S.LEDGER end else @ledgerCode end
			AND case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end = case when @orgid = -1 then case when ALLOCATION = 'Contracts' then PROJECTS.BORGID else S.ORGID end else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND BORGS.PERIOD = case when @period = -1 then BORGS.PERIOD else @period end
			AND S.currency = case when @curr = '' then S.currency else @curr end
			AND isnull(Contracts.ContrNumber, '') = case when @contract = '' then isnull(Contracts.ContrNumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
			AND isnull(S.DIVID, -1) = case when @divid = -1 then isnull(S.DIVID, -1) else @divid end
            AND SAMOUNT.AMOUNT <> 0  
    
      /*
			UNION ALL
			/*Fringe Benefit*/
			SELECT TRANSACTIONS.Pdate,
			'FRBACC' as Batchref,
			'FRB' as Transref,
			TRANSACTIONS.Ledgercode,
			TRANSACTIONS.Contract,
			'Fringe Benefit' as Description,
			TRANSACTIONS.Currency,
			round(TRANSACTIONS.Debit * TAXFB.CONSIDER / 100 * ROUND(TAXRATEFB / 100, ISNULL(CURRENCIES.DECIMALS, 2)), ISNULL(CURRENCIES.DECIMALS, 2)) as Debit,
			round(TRANSACTIONS.Credit * TAXFB.CONSIDER / 100 * ROUND(TAXRATEFB / 100, ISNULL(CURRENCIES.DECIMALS, 2)), ISNULL(CURRENCIES.DECIMALS, 2)) as Credit,
			TRANSACTIONS.Credno,
			' ' as Credrec,
			' ' as Debtrec,
			' ' as Subbrec,
			TRANSACTIONS.Plantno,
			TRANSACTIONS.Stockno,
			TRANSACTIONS.STORE,
			TRANSACTIONS.Quantity,
			TRANSACTIONS.Unit,
			' ' as Grnno,
			abs(TRANSACTIONS.Homecurramount) as Homecurramount,
			round(case when TRANSACTIONS.CURRENCY = BORGS.CURRENCY then TRANSACTIONS.DEBIT - TRANSACTIONS.CREDIT ELSE CASE WHEN TRANSACTIONS.DEBIT > 0 then abs(TRANSACTIONS.HOMECURRAMOUNT) else -1 * abs(TRANSACTIONS.HOMECURRAMOUNT) END END * TAXFB.CONSIDER / 100 * ROUND(TAXRATEFB / 100, ISNULL(CURRENCIES2.DECIMALS, 2)), ISNULL(CURRENCIES2.DECIMALS, 2)) as HOMEAMOUNT,
			Contracts.Contrname,
			LEDGERCODES.LedgerName,
			PROJECTS.Projname as Projname,
			PROJECTS.Projnumber as Projnumber,
			TRANSACTIONS.Year,
			TRANSACTIONS.Period,
			TRANSACTIONS.ORDERNO,
			TRANSACTIONS.ALLOCATION,
			'Fringe Benefit Accruals' as accrual,
			TRANSACTIONS.ORGID,
			CONTRACTS.CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 as STKID,
			TRANSACTIONS.RATE,
			TRANSACTIONS.DIVID as DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' as VATID
			FROM TRANSACTIONS
			INNER JOIN TAXFB ON TRANSACTIONS.LedgerCode = TAXFB.LEDGERCODE
			INNER JOIN BORGS ON TRANSACTIONS.ORGID = BORGS.BORGID
			LEFT OUTER JOIN CONTRACTS ON TRANSACTIONS.Contract = CONTRACTS.CONTRNUMBER
			LEFT OUTER JOIN ACTIVITIES ON TRANSACTIONS.Activity = ACTIVITIES.ActNumber
			LEFT OUTER JOIN PROJECTS on CONTRACTS.projid = PROJECTS.projid
			LEFT OUTER JOIN CURRENCIES ON TRANSACTIONS.Currency = CURRENCIES.CURRCODE
			LEFT OUTER JOIN CURRENCIES CURRENCIES2 ON BORGS.CURRENCY = CURRENCIES2.CURRCODE
			LEFT OUTER JOIN LEDGERCODES ON LEDGERCODES.LedgerCode = TRANSACTIONS.Ledgercode
			LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = TRANSACTIONS.Plantno
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Fringe Benefit'
			WHERE ACCRUALS.INUSE = 1 AND ISNULL(TRANSACTIONS.FBID, -1) = -1
			and TRANSACTIONS.LedgerCode = case when @ledgerCode = '' then TRANSACTIONS.LedgerCode else @ledgerCode end
			AND TRANSACTIONS.ORGID = case when @orgid = -1 then TRANSACTIONS.ORGID else @orgid end
			AND TRANSACTIONS.Year = case when @year = -1 then TRANSACTIONS.Year else cast(@year as char(10)) end
			AND TRANSACTIONS.Period = case when @period = -1 then TRANSACTIONS.Period else @period end
			AND TRANSACTIONS.Currency = case when @curr = '' then TRANSACTIONS.Currency else @curr end
			AND isnull(TRANSACTIONS.Contract, '') = case when @contract = '' then isnull(TRANSACTIONS.Contract, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
			AND isnull(TRANSACTIONS.DIVID, -1) = case when @divid = -1 then isnull(TRANSACTIONS.DIVID, -1) else @divid end
      */

			UNION ALL
			/*Stock*/
			SELECT GETDATE() AS Pdate,
			INVSTORES.StoreCode AS Batchref,
			LEFT(INVENTORY.STKCODE, 10) AS TransRef,
			LEDGERCODES.LedgerCode,
			CONTRACTS.CONTRNUMBER AS Contract,
			rtrim(ltrim(replace(replace(replace(replace(cast(INVENTORY.StkDesc as nvarchar(MAX)),' ',''),char(9),''),char(10),''),char(13),' '))) AS Description,
			BORGS.CURRENCY AS Currency,
			round(CAST(INVENTORY.StkQuantity * INVENTORY.StkSellRate AS money), isnull(CURRENCIES.DECIMALS, 2)) AS Debit,
			0 AS Credit,
			' ' AS Credno,
			' ' AS Credrec,
			' ' AS Debtrec,
			' ' AS Subbrec,
			'-1' AS Plntno,
			INVENTORY.STKCODE AS Stockno,
			INVSTORES.StoreCode as store,
			INVENTORY.StkQuantity AS Quantitiy,
			INVENTORY.StkUnit AS Unit,
			' ' AS Grnno,
			0 AS HomeCurrAmount,
			round(CAST(INVENTORY.StkQuantity * INVENTORY.StkSellRate AS money), isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT,
			CONTRACTS.CONTRNAME AS Contrname,
			LEDGERCODES.LedgerName,
			PROJECTS.ProjName AS Projname,
			PROJECTS.ProjNumber AS Projnumber,
			BORGS.CURRENTYEAR AS Year,
			BORGS.PERIOD AS period,
			' ' AS ORDERNO,
			'Contracts' AS ALLOCATION,
			'Stock' AS ACCRUAL,
			INVENTORY.BorgID AS BORGID,
			0 AS CONSTATUS,
			' ' AS ACTNAME,
			' ' AS ACTNUMBER,
			' ' AS ACTUNIT,
			INVENTORY.StkID AS STKID,
			INVENTORY.StkSellRate AS Rate,
			- 1 AS Div,
			' ' AS Tid,
			' ' AS Delno,
			' ' AS VATID
			FROM CONTRACTS
			INNER JOIN INVSTORES ON CONTRACTS.CONTRNUMBER = INVSTORES.StoreContNumber
			INNER JOIN INVENTORY ON INVSTORES.StoreCode = INVENTORY.StkStore
			INNER JOIN PROJECTS ON INVENTORY.BorgID = PROJECTS.BORGID AND CONTRACTS.PROJID = PROJECTS.PROJID
			INNER JOIN LEDGERCODES ON INVSTORES.StoreDefContGL = LEDGERCODES.LedgerCode
			INNER JOIN BORGS on BORGS.BORGID = INVENTORY.BorgID
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Stock'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			WHERE ACCRUALS.INUSE = 1 AND INVENTORY.StkQuantity > 0
			and LEDGERCODES.LedgerCode = case when @ledgerCode = '' then LEDGERCODES.LedgerCode else @ledgerCode end
			AND INVENTORY.BorgID = case when @orgid = -1 then INVENTORY.BorgID else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND BORGS.PERIOD = case when @period = -1 then BORGS.PERIOD else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(CONTRACTS.CONTRNUMBER, '') = case when @contract = '' then isnull(CONTRACTS.CONTRNUMBER, '') else @contract end
			AND '' = case when @actno = '-1' then '' else @actno end
			AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
			AND -1 = case when @divid = -1 then -1 else @divid end
    
			UNION ALL
			/*Jobcards*/
			SELECT JobCardDetail.JobDDate AS Pdate,
			'JCACC' AS Batchref,
			JobCardHeader.JobCard# AS TransRef,
			JobCardDetail.LedgerCodeDetail AS LedgerCode,
			CONTRACTS.CONTRNUMBER AS Contract,
			rtrim(ltrim(replace(replace(replace(replace(cast(JobCardDetail.JobDDescription as nvarchar(MAX)),' ',''),char(9),''),char(10),''),char(13),' '))) AS Description,    
			BORGS.CURRENCY AS Currency,
	    case when JobCardDetail.JobDAmount > 0 then round(JobCardDetail.JobDAmount, isnull(CURRENCIES.DECIMALS, 2)) else 0 end AS Debit,
	    case when JobCardDetail.JobDAmount < 0 then round(abs(JobCardDetail.JobDAmount), isnull(CURRENCIES.DECIMALS, 2)) else 0 end AS Credit,
			' ' AS Credno,
			' ' AS Credrec,
			' ' AS Debtrec,
			' ' AS Subbrec,
			' ' AS Plantno,
			' ' AS Stockno,
			' ' as store,
			JobCardDetail.JobDQuantity AS Quantity,
			JobCardDetail.JobDUnit AS Unit,
			' ' AS Grnno,
			0 AS HomeCurrAmount,
			round(JobCardDetail.JobDAmount, isnull(CURRENCIES.DECIMALS, 2)) AS HOMEAMOUNT,
			CONTRACTS.CONTRNAME AS Contrname,
			LEDGERCODES.LedgerName AS Ledgername,
			PROJECTS.ProjName AS Projname,
			PROJECTS.ProjNumber AS Projnumber,
			BORGS.CURRENTYEAR AS Year,
			BORGS.PERIOD AS period,
			' ' AS ORDERNO,
			JobCardHeader.JobAllocation AS ALLOCATION,
			'Job Card' AS ACCRUAL,
			JobCardHeader.BORGID AS BORGID,
			0 AS CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			' ' AS STKID,
			JobCardDetail.JobDRate AS Rate,
			JobCardHeader.DivID AS Div,
			JobCardDetail.JobDDetialId AS Tid,
			' ' AS Delno,
			' ' AS VATID
			FROM JobCardDetail
			INNER JOIN JobCardHeader ON JobCardDetail.JobDCardID = JobCardHeader.JobCardID
			INNER JOIN CONTRACTS ON JobCardHeader.ContractID = CONTRACTS.CONTRNUMBER
			INNER JOIN PROJECTS ON CONTRACTS.PROJID = PROJECTS.PROJID
			INNER JOIN LEDGERCODES ON JobCardDetail.LedgerCodeDetail = LEDGERCODES.LedgerCode
			INNER JOIN ACTIVITIES ON JobCardDetail.JobDActNumber = ACTIVITIES.ActNumber
			INNER JOIN BORGS on BORGS.BORGID = JobCardHeader.BORGID
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Jobcards'
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = BORGS.CURRENCY
			WHERE ACCRUALS.INUSE = 1 AND JobCardDetail.JobDPosted = 0
			and JobCardDetail.LedgerCodeDetail = case when @ledgerCode = '' then JobCardDetail.LedgerCodeDetail else @ledgerCode end
			AND JobCardHeader.BORGID = case when @orgid = -1 then JobCardHeader.BORGID else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND BORGS.PERIOD = case when @period = -1 then BORGS.PERIOD else @period end
			AND BORGS.CURRENCY = case when @curr = '' then BORGS.CURRENCY else @curr end
			AND isnull(CONTRACTS.CONTRNUMBER, '') = case when @contract = '' then isnull(CONTRACTS.CONTRNUMBER, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
			AND isnull(JobCardHeader.DIVID, -1) = case when @divid = -1 then isnull(JobCardHeader.DIVID, -1) else @divid end
    
			UNION ALL
			/*Debtors Recons*/
			SELECT DEBTRECONS.PostDate AS Pdate,
			'DEBTACC' as Batchref,
			'DEBTACC' as Transref,
			DEBTORS.DEBTGLCODE as Ledgercode,
			Contracts.ContrNumber as Contract,
			'Debtors Certificates' as Description,
			DEBTRECONS.currency as Currency,
			CASE WHEN (isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0)) < 0 THEN round(ABS((isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0))), isnull(CURRENCIES.DECIMALS, 2)) ELSE 0 END as Debit,
			CASE WHEN (isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0)) < 0 THEN 0 ELSE round(ABS((isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0))), isnull(CURRENCIES.DECIMALS, 2)) END as Credit,
			DEBTORS.DEBTNUMBER as Credno,
			' ' AS Credrec,
			' ' AS Debtrec,
			DEBTORS.DEBTNAME AS Subbrec,
			' ' AS Plantno,
			' ' AS Stockno,
			' ' as store,
			0 as Quantity,
			' ' AS Unit,
			' ' AS Grnno,
			cast(abs(isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0))
			* CASE when DEBTRECONS.CURRENCY <> BORGS.CURRENCY and DB.CURRENCY = BORGS.CURRENCY then DEBTRECONS.EXCHRATE when DEBTRECONS.CURRENCY = EXR.CURRCODE then EXR.RATE else 0 end as decimal(38, 4)) as HOMECURRAMOUNT,
			cast(abs(isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0))
			* CASE when DEBTRECONS.CURRENCY <> BORGS.CURRENCY and DB.CURRENCY = BORGS.CURRENCY then DEBTRECONS.EXCHRATE when DEBTRECONS.CURRENCY = EXR.CURRCODE then EXR.RATE else 1 end as decimal(38, 4)) as HOMEAMOUNT,
			Contracts.Contrname,
			Ledgercodes.LEDGERNAME as Ledgername,
			Projname as Projname,
			Projnumber as Projnumber,
			BORGS.CURRENTYEAR as Year,
			BORGS.PERIOD as Period,
			' ' AS ORDERNO,
			LEDGERCODES.LEDGERALLOC as ALLOCATION,
			'Debtors Recon Accruals' as accrual,
			case when LEDGERCODES.LedgerAlloc = 'Contracts' then PROJECTS.BORGID else DEBTRECONS.ORGID END ORGID,
			CONTRACTS.CONSTATUS,
			isnull(ACTIVITIES.ACTNAME,' ') as ACTNAME,
			isnull(ACTIVITIES.ACTNUMBER, ' ') as ACTNUMBER,
			ACTIVITIES.ACTUNIT,
			-1 AS STKID,
			0 AS RATE,
			-1 as DIV,
			-1 AS TID,
			' ' AS Delno,
			' ' AS VATID
			FROM DEBTRECONS
			INNER JOIN DEBTORS ON DEBTRECONS.SubConNumber = DEBTORS.DEBTID
			LEFT OUTER JOIN ACTIVITIES ON DEBTRECONS.Activity = ACTIVITIES.ActID
			LEFT OUTER JOIN CONTRACTS ON DEBTRECONS.Contract = CONTRACTS.CONTRID
			LEFT OUTER JOIN PROJECTS on CONTRACTS.projid = PROJECTS.projid
			INNER JOIN LEDGERCODES ON DEBTORS.DEBTGLCODE = LEDGERCODES.LEDGERCODE
			LEFT OUTER JOIN CURRENCIES ON CURRENCIES.CURRCODE = DEBTRECONS.currency
			LEFT OUTER JOIN BORGS DB ON DEBTRECONS.ORGID = DB.BORGID
			OUTER APPLY (
			 SELECT
			 RTrim(CURR.CURRCODE) CURRCODE,
			 isnull(CCEE.RATE, -1) as RATE,
			 isnull(CURR.DECIMALS, 2) DECIMALS
			 from CURRENCIES CURR
			 INNER JOIN (
			  select CCE.FROMCURR, CCE.RATE
			  FROM BORGS B
			  INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
			  INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
			  INNER JOIN (
			   SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
			   FROM CURREXCH C
			   GROUP BY GROUPID, FROMCURR, TOCURR) ce
			  ON CCE.GROUPID = ce.groupid
			  AND CCE.FROMCURR = ce.fromcurr
			  AND CCE.TOCURR = ce.tocurr
			  AND CCE.STARTDATE = ce.startdate
			  WHERE B.BORGID = CASE WHEN LEDGERCODES.LEDGERALLOC = 'CONTRACTS' THEN PROJECTS.BORGID ELSE DEBTRECONS.ORGID END
			  and CCG.DISABLED = 0
			  ) CCEE
			 ON CCEE.FROMCURR = CURR.CURRCODE
			 WHERE CURR.CURRCODE = DEBTRECONS.CURRENCY
			 ) EXR
			INNER JOIN BORGS on BORGS.BORGID = case when LEDGERCODES.LedgerAlloc = 'Contracts' then PROJECTS.BORGID else DEBTRECONS.ORGID end
			INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Debtors Recons'
			WHERE ACCRUALS.INUSE = 1 AND DEBTRECONS.Posted = 0 AND (isnull(DEBTRECONS.WORKDONETHISMONTH, 0) + isnull(DEBTRECONS.MOSTHISMONTH, 0) + isnull(DEBTRECONS.ESCALATIONTHISMONTH, 0) - isnull(DEBTRECONS.DISCOUNTTHISMONTH, 0)) <> 0
			and DEBTORS.DEBTGLCODE = case when @ledgerCode = '' then DEBTORS.DEBTGLCODE else @ledgerCode end
			AND case when LEDGERCODES.LedgerAlloc = 'Contracts' then PROJECTS.BORGID else DEBTRECONS.ORGID END = case when @orgid = -1 then case when LEDGERCODES.LedgerAlloc = 'Contracts' then PROJECTS.BORGID else DEBTRECONS.ORGID END else @orgid end
			AND BORGS.CURRENTYEAR = case when @year = -1 then BORGS.CURRENTYEAR else @year end
			AND BORGS.PERIOD = case when @period = -1 then BORGS.PERIOD else @period end
			AND DEBTRECONS.currency = case when @curr = '' then DEBTRECONS.currency else @curr end
			AND isnull(Contracts.ContrNumber, '') = case when @contract = '' then isnull(Contracts.ContrNumber, '') else @contract end
			AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
			AND -1 = case when @plantDivid = -1 then -1 else @plantDivid end
			AND -1 = case when @divid = -1 then -1 else @divid end

      UNION ALL
      /*Journals*/ 
      select
      isnull(JOURNALS.pdate, JOURNALHEADER.JnlHeadDate) as PDATE,
      JOURNALHEADER.JNLHEADBATCH as BATCHREF,
      case when JOURNALHEADER.JnlIsAutoIC <> 0 then JOURNALHEADER.JnlHeadTransRef else JOURNALS.JNLTRANSREF end as TRANSREF,
      JOURNALS.JnlLedgerCode as LEDGERCODE,
      case when LEDGERCODES.LEDGERALLOC = 'Contracts' or rtrim(JOURNALS.JnlContract) <> '' then JOURNALS.JnlContract else '' end as CONTRACT,
      JOURNALS.JnlDescription as DESCRIPTION,
      BORGS.Currency as CURRENCY,
      case when JOURNALS.JnlDebit <> 0 then JOURNALS.JnlDebit - JOURNALS.JnlVatDebit + abs(MT.REIMBTAX) else 0 end as DEBIT,
      case when JOURNALS.JnlDebit = 0 then JOURNALS.JnlCredit - JOURNALS.JnlVatCredit + abs(MT.REIMBTAX) else 0 end as CREDIT,
      JOURNALS.JnlCredno as CREDNO,
      isnull(CREDITORS.CREDNAME, '') as CREDREC,
      isnull(DEBTORS.DEBTNAME, '') as DEBTREC,
      isnull(SUBCONTRACTORS.SUBNAME, '') as SUBBREC,
      case when JOURNALHEADER.ISFASSET = 1 then JOURNALS.ASSETNUMBER else JOURNALS.JnlPlant end as PLANTNO,
      ' ' as STOCKNO,
      ' ' as STORE,
      0 as QUANTITY,
      ' ' as UNIT,
      ' ' as GRNNO,
      case when BORGS.Currency = JOURNALHEADER.JNLHEADCURRENCY then 0 else round((case when JOURNALS.JnlDebit <> 0 then JOURNALS.JnlDebit - JOURNALS.JnlVatDebit + abs(MT.REIMBTAX) else JOURNALS.JnlCredit - JOURNALS.JnlVatCredit + abs(MT.REIMBTAX) end) * (case when BORGS.Currency = BORGS.CURRENCY then JOURNALS.JnlExchRate else EXR.RATE end), 2) end as HOMECURRAMOUNT,
      case when BORGS.Currency = JOURNALHEADER.JNLHEADCURRENCY then abs((JOURNALS.JnlDebit - JOURNALS.JnlVatDebit + abs(MT.REIMBTAX)) - (JOURNALS.JnlCredit - JOURNALS.JnlVatCredit + abs(MT.REIMBTAX))) else round((case when JOURNALS.JnlDebit <> 0 then JOURNALS.JnlDebit - JOURNALS.JnlVatDebit + abs(MT.REIMBTAX) else JOURNALS.JnlCredit - JOURNALS.JnlVatCredit + abs(MT.REIMBTAX) end) * (case when BORGS.Currency = BORGS.CURRENCY then JOURNALS.JnlExchRate else EXR.RATE end), 2) end as HOMEAMOUNT,
      Contracts.Contrname as CONTRNAME,
      Ledgercodes.Ledgername as LEDGERNAME,
      PROJECTS.Projname as PROJNAME,
      PROJECTS.Projnumber as PROJNUMBER,
      CASE WHEN isnull(JOURNALHEADER.JNLYEAR, '') = '' then BORGS.CURRENTYEAR else JOURNALHEADER.JNLYEAR end AS Year,
      case when isnull(JOURNALHEADER.JnlPeriod, -1) = -1 then BORGS.PERIOD else JOURNALHEADER.JnlPeriod end as PERIOD,
      ' ' as ORDERNO,
      LEDGERCODES.LEDGERALLOC as ALLOCATION,
      'Journals' as ACCRUAL,
      case when JOURNALS.JNLTOORG = -1 then JOURNALS.JnlOrg ELSE JOURNALS.JNLTOORG END as BORGID,
      CONTRACTS.CONSTATUS as CONSTATUS,
      isnull(ACTIVITIES.ACTNAME, ' ') as ACTNAME,
      case when LEDGERCODES.LEDGERALLOC = 'Contracts' then JOURNALS.JnlActivity else '' end as ACTNUMBER,
      ACTIVITIES.ACTUNIT as ACTUNIT,
      -1 as STKID,
      0 as RATE,
      case when isnull(JOURNALS.JnlDivision, '') = '' then -1 else JOURNALS.JnlDivision end as DIVID,
      0 as DLVRID,
      ' ' as DLVRNO,
      case when JOURNALS.JNLTOORG = JOURNALS.JnlOrg or JOURNALS.JNLTOORG = -1 then JOURNALS.JnlVATType else 'Z' end as VATID 
      from JOURNALHEADER
      INNER JOIN JOURNALS ON JOURNALHEADER.JNLHEADID = JOURNALS.JNLHEADID
      INNER JOIN LEDGERCODES ON JOURNALS.JNLLEDGERCODE = LEDGERCODES.LEDGERCODE
      INNER JOIN BORGS ON BORGS.BORGID = JOURNALHEADER.BorgID
      LEFT OUTER JOIN DIVISIONS on JOURNALS.JnlDivision = DIVISIONS.DIVID
      LEFT OUTER JOIN ACTIVITIES ON JOURNALS.JnlActivity = ACTIVITIES.ACTNUMBER
      LEFT OUTER JOIN CONTROLCODES ON LEDGERCODES.LEDGERCODE BETWEEN CONTROLCODES.CONTROLFROMGL AND CONTROLCODES.CONTROLTOGL and CONTROLCODES.ControlName in ('Creditors','Debtors','Sub Contractors')
      LEFT OUTER JOIN CREDITORS ON CREDITORS.CREDNUMBER = JOURNALS.JnlCredno and CONTROLCODES.ControlName = 'Creditors'
      LEFT OUTER JOIN DEBTORS ON DEBTORS.DEBTNUMBER = JOURNALS.JnlCredno and CONTROLCODES.ControlName = 'Debtors'
      LEFT OUTER JOIN SUBCONTRACTORS ON SUBCONTRACTORS.SUBNUMBER = JOURNALS.JnlCredno and CONTROLCODES.ControlName = 'Sub Contractors'
      LEFT OUTER JOIN CONTRACTS ON CONTRACTS.CONTRNUMBER = JOURNALS.JnlContract 
      LEFT OUTER JOIN PLANTANDEQ ON PLANTANDEQ.PENUMBER = case when JOURNALHEADER.ISFASSET = 1 then JOURNALS.ASSETNUMBER else JOURNALS.JnlPlant end
      LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
      OUTER APPLY(SELECT ISNULL(SUM(ISNULL(TAX, 0)), 0) REIMBTAX FROM GETVIEWTAXTRANS('', (JOURNALS.JNLDEBIT - JOURNALS.JNLVATDEBIT) - (JOURNALS.JNLCREDIT - JOURNALS.JNLVATCREDIT), JOURNALS.JNLVATTYPE, ISNULL(JOURNALS.JNLTOORG, JOURNALHEADER.BORGID), JOURNALHEADER.JNLHEADCURRENCY) WHERE ISNULL(ISREIMB, -1) = 0) MT
      OUTER APPLY (
        SELECT
        RTrim(CURR.CURRCODE) CURRCODE,
        isnull(CCEE.RATE, -1) as RATE,
        isnull(CURR.DECIMALS, 2) DECIMALS
        from CURRENCIES CURR
        INNER JOIN (
        select CCE.FROMCURR, CCE.RATE
        FROM BORGS B
        INNER JOIN CURREXCH CCE ON CCE.GROUPID = B.CURREXGRP AND B.CURRENCY = CCE.TOCURR
        INNER JOIN CURREXCHGRP CCG ON CCE.GROUPID = CCG.GROUPID
        INNER JOIN (
        SELECT GROUPID, FROMCURR, TOCURR, MAX(STARTDATE) AS STARTDATE
        FROM CURREXCH C
        GROUP BY GROUPID, FROMCURR, TOCURR) ce
        ON CCE.GROUPID = ce.groupid
        AND CCE.FROMCURR = ce.fromcurr
        AND CCE.TOCURR = ce.tocurr
        AND CCE.STARTDATE = ce.startdate
        WHERE B.BORGID = ISNULL(JOURNALS.JNLTOORG, JOURNALHEADER.BorgID)
        and CCG.DISABLED = 0
        ) CCEE
        ON CCEE.FROMCURR = CURR.CURRCODE
        WHERE CURR.CURRCODE = JOURNALHEADER.JnlHeadCurrency
      ) EXR
      INNER JOIN ACCRUALS on BORGS.BORGID = ACCRUALS.BORGID and ACCRUALS.ACCRUAL = 'Journals'
      WHERE ACCRUALS.INUSE = 1
      and Ledgercodes.LEDGERCODE = case when @ledgerCode = '' then Ledgercodes.LEDGERCODE else @ledgerCode end
      AND case when JOURNALS.JNLTOORG = -1 then JOURNALS.JnlOrg ELSE JOURNALS.JNLTOORG END = case when @orgid = -1 then case when JOURNALS.JNLTOORG = -1 then JOURNALS.JnlOrg ELSE JOURNALS.JNLTOORG END else @orgid end
      AND CASE WHEN isnull(JOURNALHEADER.JNLYEAR, '') = '' then BORGS.CURRENTYEAR else JOURNALHEADER.JNLYEAR end = case when @year = -1 then CASE WHEN isnull(JOURNALHEADER.JNLYEAR, '') = '' then BORGS.CURRENTYEAR else JOURNALHEADER.JNLYEAR end else @year end
      AND case when isnull(JOURNALHEADER.JnlPeriod, -1) = -1 then BORGS.PERIOD else JOURNALHEADER.JnlPeriod end = case when @period = -1 then case when isnull(JOURNALHEADER.JnlPeriod, -1) = -1 then BORGS.PERIOD else JOURNALHEADER.JnlPeriod end else @period end
      AND JOURNALHEADER.JnlHeadCurrency = case when @curr = '' then JOURNALHEADER.JnlHeadCurrency else @curr end
      AND isnull(Contracts.Contrnumber, '') = case when @contract = '' then isnull(Contracts.Contrnumber, '') else @contract end
      AND isnull(ACTIVITIES.ACTNUMBER, '') = case when @actno = '-1' then isnull(ACTIVITIES.ACTNUMBER, '') else @actno end
      AND isnull(PLANTANDEQ.DIVID, -1) = case when @plantDivid = -1 then isnull(PLANTANDEQ.DIVID, -1) else @plantDivid end
      AND isnull(JOURNALS.JnlDivision, -1) = case when @divid = -1 then isnull(JOURNALS.JnlDivision, -1) else @divid end
      AND JOURNALHEADER.JnlHeadPosted = 0
      AND JOURNALHEADER.ARCHIVE = 0
      AND JOURNALHEADER.BATCHMODE = 0
      AND JOURNALHEADER.JnlIsAutoIC = 0

		) AC
		INNER JOIN BORGS B on B.CURRENTYEAR = AC.YEAR and B.BORGID = AC.BORGID
		LEFT OUTER JOIN CONTRACTS ON AC.CONTRACT = CONTRACTS.CONTRNUMBER AND AC.ALLOCATION = 'Contracts'
		LEFT OUTER JOIN PROJECTS ON PROJECTS.PROJID = CONTRACTS.PROJID
		LEFT OUTER JOIN ACTIVITIES ON AC.ACTNUMBER = ACTIVITIES.ACTNUMBER and AC.ALLOCATION = 'Contracts'
		LEFT OUTER JOIN PLANTANDEQ on PLANTANDEQ.PENUMBER = AC.PLANTNO AND AC.ALLOCATION = 'Plant'
		LEFT OUTER JOIN DIVISIONS on DIVISIONS.DIVID = AC.DIVID AND AC.ALLOCATION = 'Overheads'
		WHERE AC.ALLOCATION in ('Contracts', 'Overheads', 'Plant')
		AND NOT(AC.ALLOCATION = 'Plant' and isnull(PLANTANDEQ.DIVID, -1) = -1)
		group by
		AC.BORGID, AC.YEAR, B.PERIOD, B.CURRENCY, AC.LEDGERCODE, AC.ALLOCATION,
		CONTRACTS.CONTRNUMBER, ACTIVITIES.ACTNUMBER, PLANTANDEQ.DIVID, DIVISIONS.DIVID

    


	)  temp
	group by
	BORGID, YEAR, PERIOD, CURRENCY,
	LEDGERCODE, ALLOCATION, CONTRACT, ACTNUMBER, PLANTDIVID, DIVID

	END
		
		